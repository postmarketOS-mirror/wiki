=== Introduction ===
{{note|Please use a spare device for experimenting with postmarketOS! You won't be able to use typical phone features right now, such as making calls, writing SMS, using Wi-Fi, using Bluetooth. Although everything has been tested, there is no guarantee that you won't break your device.}}

If you have ''any'' questions, feel free to ask in the [[Matrix and IRC|matrix/irc channel]] or [https://github.com/postmarketOS/pmbootstrap/issues bug tracker]! This is a wiki, so '''please adjust everything that isn't detailed enough or would have helped you with porting.''' Please write your porting '''progress to the [[Devices]] page''', even if you didn't get very far. This helps to determine what can be improved to make porting easier. We even have a [[Help:Device Page|tutorial for that]].

=== Initialization ===

* Clone the repository: <code>git clone https://github.com/postmarketOS/pmbootstrap</code>
* Run <code>./pmbootstrap.py init</code> and configure for a new device
* Open a second terminal and run <code>./pmbootstrap.py log</code> to get detailed output from the following pmbootstrap commands

=== Device-specific package ===

Create an appropriate <code>device-$vendor-$name</code> package in the <code>aports/device</code> folder:

<pre class="shell">cp -r aports/device/device-samsung-i9100 aports/device/device-vendor-name</pre>
The important files are <code>APKBUILD</code> (''build recipe, [[Glossary#apk|apk is an Alpine Linux term]]'') and [[deviceinfo]]. Please adjust them as necessary. For more info, see [[How to find device specific information]], particularly the section "Fastboot (boot.img) flash offsets".

Note that if your device uses '''fastboot''' or [https://wiki.postmarketos.org/wiki/Deviceinfo_flash_methods#Isorec_or_bootimg.3F '''heimdall-bootimg'''], you will need to add <code>mkbootimg</code> to the <code>depends=</code> list in the <code>APKBUILD</code>, and the following variables at the end of <code>deviceinfo</code> ([https://wiki.postmarketos.org/wiki/How_to_find_device_specific_information#Fastboot_.28boot.img.29_flash_offsets guide], [https://github.com/postmarketOS/pmbootstrap/blob/eddf81a730b68076e59b66f2a6163e6587b7fc84/aports/device/device-sony-yuga/deviceinfo#L22-L28 example]):

<pre class="shell"># Fastboot related
deviceinfo_generate_bootimg=&quot;true&quot;
deviceinfo_flash_offset_base=&quot;&quot;
deviceinfo_flash_offset_kernel=&quot;&quot;
deviceinfo_flash_offset_ramdisk=&quot;&quot;
deviceinfo_flash_offset_second=&quot;&quot;
deviceinfo_flash_offset_tags=&quot;&quot;
deviceinfo_flash_pagesize=&quot;&quot;</pre>
A post-install script can be chttps://wiki.postmarketos.org/wiki/How_to_find_device_specific_information#Fastboot_.28boot.img.29_flash_offsetsreated to append device-specific partitions to <code>/etc/fstab</code>. See [https://github.com/postmarketOS/pmbootstrap/blob/ed8fba54c31c3ccd1f1f59c7194fffecc63ca7c4/aports/device/device-nokia-rx51/device-nokia-rx51.post-install#L12 the post-install script] for <code>device-nokia-rx51</code> for an example.

Once the device package is configured, you will need to update checksums in the APKBUILD to match the new configuration files. You can do that by running:

<pre class="shell">./pmbootstrap.py checksum device-$vendor-$name</pre>
Now, you can build your device package with:

<pre class="shell">./pmbootstrap.py build device-$vendor-$name</pre>

=== Kernel package ===

While the goal is to use a mainline kernel for all devices in the long run, this certainly can not be done in one step when porting to a new device. Create a new package for the kernel by copying the kernel package of the most similar device with an existing port. For example:

<pre class="shell">cp -r aports/device/linux-lg-mako aports/device/linux-vendor-name</pre>
Now edit the <code>APKBUILD</code>. Replace the kernel source with a kernel suitable for your device. For Android devices we usually use the [https://wiki.postmarketos.org/wiki/How_to_find_device_specific_information#LineageOS_kernel_source_repository kernels from LineageOS]. Copy the right [https://wiki.postmarketos.org/wiki/How_to_find_device_specific_information#Kernel_defconfig_.28default_config.29 default config] from your kernel's source folder into your new <code>linux-...</code> folder and adjust its file name. Please adjust the comments in the <code>APKBUILD</code> file about which defconfig you have used, and which modifications you have made. Please also adjust the <code>pkgver</code>/<code>pkgrel</code> to match the [https://stackoverflow.com/a/12151781 kernel version].

Next, generate the checksum for the kernel package files using:

<pre class="shell">./pmbootstrap.py checksum linux-$vendor-$name</pre>
Now, before building the kernel itself, it is required to run the kernel's [https://en.wikipedia.org/wiki/Menuconfig menuconfig] with:

<pre class="shell">./pmbootstrap.py menuconfig linux-$vendor-$name</pre>
The first time, you run the menuconfig command, you will get prompted about new config options, that the default config does not address (in Android's build process, these options get ignored, but in pmOS they must be specified). Please accept the defaults it presents.<br/>After that, you will be shown a menu, in which the [https://wiki.postmarketos.org/wiki/Kernel_configuration#Required required kernel options] must be set for pmOS to work.

The easiest way is getting out of the menu with "Exit", and confirming when asked whether the changes should be saved. Then run the following to see what needs to be changed in your config:
<pre class="shell">./pmbootstrap.py kconfig_check</pre>
Adjust your kernel config until <code>kconfig_check</code> doesn't complain anymore.

Once you have configured the kernel, build it (the arch specification is necessary here, because we're really compiling code - the device package just contains text/scripts and no native code, therefore it is architecture independent):

<pre class="shell">./pmbootstrap.py build linux-$vendor-$name --arch=armhf</pre>
''NOTE'': The <code>linux-lg-mako</code> package has a patch called <code>gpu-msm-fix-gcc5-compile.patch</code>, to fix compiler errors with GCC6. If your kernel doesn't need that specific patch (if it does not apply correctly, as in [https://github.com/postmarketOS/pmbootstrap/issues/14#issuecomment-305083767 this] report), just remove the file, and remove it from the <code>source=</code> line in the <code>APKBUILD</code>.

Important: You will need to '''patch your kernel to get it working with GCC6''' - read [[how to create a patch when packaging software]] for instructions.

If your manufacturer has not released the source code of your kernel and you don't want to give up on porting your device, you can try the [[Using-prebuilt-kernels|prebuilt kernels]] approach.

==== Appended device trees ====

Some devices need an appended device tree to boot. In LineageOS kernels this will mean that beside the generated <code>zImage</code> there is also a <code>zImage-dtb</code> file. To use this you have to enable in your kernel appending the <code>dtb</code> as in [https://github.com/postmarketOS/pmbootstrap/blob/51af907534a1518c22f78c006ae880d495ec3985/aports/linux-lg-hammerhead/config-lg-hammerhead.armhf#L674 lg-hammerhead] and change the package step in the build script to use the <code>dtb</code> file:

<pre class="shell"># Change zImage to zImage-dtb on this command:    
install -Dm644 &quot;$srcdir/build/arch/arm/boot/zImage-dtb&quot; \
               &quot;$pkgdir/boot/vmlinuz-$_flavor&quot;</pre>
In Android kernels, you usually enable <code>BUILD_ARM_APPENDED_DTB_IMAGE</code> and get an image with <code>dtb</code> appended and the filename will be <code>zImage-dtb</code>.

In the mainline kernel instead, you enable [https://github.com/postmarketOS/pmbootstrap/blob/51af907534a1518c22f78c006ae880d495ec3985/aports/linux-nokia-rx51/config-nokia-rx51.armhf#L555 <code>ARM_APPENDED_DTB</code>] (without trialing **_IMAGE**) and will get a bunch of <code>.dtb</code> files for the boards that are selected in the kernel config. In this case you need to manually append the correct <code>.dtb</code> file to the compiled kernel image <code>zImage</code>. An example of this is in the kernel package for the [https://github.com/postmarketOS/pmbootstrap/blob/51af907534a1518c22f78c006ae880d495ec3985/aports/linux-nokia-rx51/APKBUILD#L94-L96 nokia n900]:

<pre class="shell">cd &quot;$srcdir/build/arch/arm/boot&quot;
cat zImage dts/omap3-n900.dtb &gt; zImage-dtb</pre>

Is it possible that your device need the dtb file appended to the boot.img instead of the kernel itself. In that case you have to pack all the generated dtb files into a single master dtb.img file (see example [https://github.com/postmarketOS/pmbootstrap/blob/cfbf06ee71eed6f9bc1ec40087c3a6c69ab629c6/aports/device/linux-huawei-y530/APKBUILD#L115-L116 here] and [https://github.com/postmarketOS/pmbootstrap/blob/cfbf06ee71eed6f9bc1ec40087c3a6c69ab629c6/aports/device/linux-huawei-y530/APKBUILD#L124-L126 here]) and add the variable <code>deviceinfo_bootimg_qcdt="true"</code> in the <code>deviceinfo</code>.

''If you are unsure, whether your device has an appended dtb file, use [https://github.com/PabloCastellano/extract-dtb extract-dtb] on an existing kernel image or boot.img file (e.g. from LineageOS or TWRP). <code>extract-dtb</code> is packaged for postmarketOS, you can build it with <code>pmbootstrap build extract-dtb</code>.''

=== Installation ===

If you want to install to the system partition of an image file, run the following:

<pre class="shell">./pmbootstrap.py install --no-fde</pre>
If you want to install to a SD card, insert it and run the following. Replace mmcblk0 with the actual device name (<code>lsblk</code> is handy to find out the correct device name).

<pre class="shell">./pmbootstrap.py install --no-fde --sdcard=/dev/mmcblk0</pre>

The <code>--no-fde</code> disables '''f'''ull '''d'''isk '''e'''ncryption. You can enable it once you have graphical output and touchscreen or physical keyboard working, so you can actually type in the password. Additional porting steps to get that working are described [[Osk-sdl#Porting_to_New_Devices|here]].

=== Flashing ===

Before you can run any flash command, you must put your device in the flashing mode. It is usually done holding Volume Down &amp; Power simultaneously when the device is switched off but it may vary depending on the device. For more information see the specific page for your device in the [https://wiki.lineageos.org/devices LineageOS Wiki].

If you want to install to the system partition, run the following (not for the SD card installation!):

<pre class="shell">./pmbootstrap.py flasher flash_system</pre>

If you have a device, that works with fastboot, you can boot the kernel now without flashing it:

<pre class="shell">./pmbootstrap.py flasher boot</pre>
Otherwise, you will need to flash the kernel to the device boot partition:

<pre class="shell">./pmbootstrap.py flasher flash_kernel</pre>

=== Alternative to flashing: export ===

If the flashing method does not work, it is also possible to export all generated image files to a specific directory (with symlinks), so you can flash it manually with your host Linux system (or even on Windows with proprietary flashers such as Odin, if this is the only way it works for you):

<pre class="shell">./pmbootstrap flasher export</pre>
=== After flashing ===

If you are lucky, your screen may give some clues that you are booted into pmOS. If not, do not get discouraged, the graphics on your device may not yet be setup correctly. The next steps are to see if you can connect to the device through telnet over USB. See the [[Boot process]] and [[Inspecting the initramfs]] pages for more details. Also check [[Tuning sysfs]].

Don't forget to [[Help:Device_Page|create a specific wiki page for your device]], and add it to the [[devices]] page. If you noticed anything that was unclear or discovered something useful, please help to improve the wiki! Feel free to ask / help on [[Matrix-and-IRC|IRC or Matrix group]].

=== Adding osk-sdl support ===

If the display & the touchscreen interface are working, then it's time to add support for osk-sdl, so that you are able to use full disk encryption on the root filesystem. Instructions for adding support can be found here: [[Osk-sdl#Porting_to_New_Devices|Porting Osk-SDL to New Devices]]
