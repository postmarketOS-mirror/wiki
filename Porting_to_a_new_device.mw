=== Preparation ===
{{note|Please use a spare device for experimenting with postmarketOS! You won't be able to use typical phone features right now, such as making calls, writing SMS, using Bluetooth. Although everything has been tested, there is no guarantee that you won't break your device.}}

* Join [[Matrix and IRC|Matrix/IRC]] to get help when you're stuck
* Search the [[devices]] page for your device to avoid duplicate work (read potentially existing device pages and check for links to existing branches).
** Note that there's a [[Generic x64 uefi]] device, which you might be able to use if your target device has a x86_64 CPU.

=== Requirements ===
==== Host PC ====
* We assume, that you are using Linux. If you don't have Linux installed, please [http://www.brianlinkletter.com/installing-debian-linux-in-a-virtualbox-virtual-machine/ set up a virtual machine with VirtualBox] first.
* The host operating system needs to run Linux 3.17 or newer (first kernel with getrandom syscall)
* A few gigabytes of free space

==== Target Device ====
If your target device has an ARM processor, it needs to have an [https://en.wikipedia.org/wiki/Floating-point_unit FPU].

Most phones fulfill this requirement: in the first > 80 ports we have had, only twice we had phones without an FPU ({{issue|1203}}, {{issue|1592}}). These are from 2010 and 2011, so it is [https://unix.stackexchange.com/a/185070 worth checking] if your device is from that time. Otherwise just go ahead.
If your device have ARMv7 CPU it should have FPU, with ARMv6 CPUs it's a 50/50 chance.

=== Initialization ===

[[installing pmbootstrap|Install pmbootstrap]], our lightweight postmarketOS development and installation tool. Then run the following:
<syntaxhighlight lang="shell-session">
$ pmbootstrap init
Location of the 'work' path. Multiple chroots (native, device arch, device rootfs) will be created in there.
Work path [/home/user/.local/var/pmbootstrap]:
</syntaxhighlight>

Type in the code name of your device to start a new port, and fill out everything else you get asked for. Check out [[how to find device specific information]] if necessary.

<pre>
Target device (either an existing one, or a new one for porting).
Available (60): asus-flo, asus-grouper, fairphone-fp2, ...
Device [samsung-i9100]: wiki-example
You are about to do a new device port for 'wiki-example'.
Continue? (y/n) [y]:
Device architecture (armhf/armv7/aarch64/x86_64/x86) [armhf]: armv7
Who produced the device (e.g. LG)?
Manufacturer: Samsung
What is the official name (e.g. Google Nexus 5)?
Name: Wiki Example
Does the device have a hardware keyboard? (y/n) [n]:
Does the device have a sdcard or other external storage medium? (y/n) [n]:
</pre>

==== Flash method ====
It depends on the flashing protocol, that comes with the device. For most Android devices, this is <code>fastboot</code>, some Samsung models need <code>heimdall</code> (which is compatible to "Odin") and some Nokia based phones work with <code>0xffff</code>. If you don't know which one it is, try to enter the bootloader on your device and check whether it says "Fastboot mode" or "Odin mode". Most of the time, that can be done by pressing the <code>Volume Down</code> key when it is just booting. In case you can't figure that one out, try to search the internet - there might even be videos on YouTube on how to do that if you're lucky.

For more information see the Wiki page about [[Deviceinfo flash methods]].

<pre>
Which flash method does the device support?
Flash method (fastboot/heimdall/0xffff) [fastboot]:
</pre>

Depending on your selection, <code>pmbootstrap</code> may ask you to analyze a <code>boot.img</code> file to get offset values required for the flash method. Get the right one for your device from [https://twrp.me/Devices/ TWRP] (<code>twrp-*.img</code>), [https://download.lineageos.org/ LineageOS] (<code>boot.img</code> inside the zip archive) or by [[Using_prebuilt_kernels#Extracting_boot.img_from_an_Android_device|extracting it from within a running Android]]. If you can't find any, you can skip this step for now by just pressing the return key.

<pre>
You can analyze a known working boot.img file to automatically fill out the flasher information for your deviceinfo file. Either specify the path to an image or press return to skip this step (you can do it later with 'pmbootstrap bootimg_analyze').
Path: /home/user/Downloads/twrp-3.2.0-0-mako.img
NOTE: You will be prompted for your sudo password, so we can set up a chroot to extract and analyze your boot.img file
(native) install alpine-base
(native) install file unpackbootimg
</pre>

==== Interfaces ====
We recommend, that you start with <code>weston</code> first, because that has been around the longest in postmarketOS and, while it is not really suitable for a phone, it works as a stable demo interface for making the graphics output work in the first place. After that one works, feel free to try out another interface (but expect, that it will not necessarily work out of the box).

<pre>
Username [user]:
Available user interfaces (5):
* none: No graphical environment
* hildon: (X11) Lightweight GTK+2 UI (optimized for single-touch touchscreens)
* luna: (Wayland) webOS UI, ported from the LuneOS project (Not working yet)
* plasma-mobile: (Wayland) Mobile variant of KDE Plasma, optimized for touchscreen
* weston: (Wayland) Reference compositor (demo, not a phone interface)
* xfce4: (X11) Lightweight GTK+2 desktop (stylus recommended)
User interface [weston]:
Build options: Parallel jobs: 3, ccache per arch: 5G
Change them? (y/n) [n]:
Additional packages that will be installed to rootfs. Specify them in a comma separated list (e.g.: vim,file) or "none"
Extra packages [none]:
Your host timezone: Europe/London
Use this timezone instead of GMT? (y/n) [y]:
WARNING: The applications in the chroots do not get updated automatically.
Run 'pmbootstrap zap' to delete all chroots once a day before working with pmbootstrap!
It only takes a few seconds, and all packages are cached.
Done!
</pre>

==== Logging ====
Open a second terminal and run the following command to see detailed logging (such as compiler output). Whenever reporting, that something does not work, please attach the detailed log output from this window.

<syntaxhighlight lang="shell-session">
$ pmbootstrap log
</syntaxhighlight>

=== Kernel package ===
While the goal is to use a [https://wiki.postmarketos.org/wiki/The_Mainline_Kernel mainline kernel] for all devices in the long run, this certainly can not be done in one step when porting to a new device. What we do in the meantime is shipping a Linux kernel fork, that is known to work with this device (e.g. from Android). The steps below are the straight forward changes you need to compile your kernel. For details see the [[vendor kernel specific package]] article.

==== Source code ====
{{note|<code>APKBUILD</code> has [[Glossary#apk|nothing to do]] with Android's app format!}}
First of all, [[How-to-find-device-specific-information#LineageOS_kernel_source_repository|find the source code]] of the known working kernel fork (lowest known working version is 3.x, 2.6 doesn't compile with GCC6, may compile with gcc4, not yet tested), then and adjust the <code># Source</code> section in the <code>aports/device/linux-wiki-example/APKBUILD</code> file. In case you have ''not'' cloned <code>pmbootstrap</code> from git, the aports folder will be in <code>cache_git/pmaports</code> inside your work folder (default: <code>~/.local/var/pmbootstrap/cache_git/pmaports</code>). For LineageOS kernels, you will only need to change <code>_repository</code> and <code>_commit</code> variables. Usually it makes sense to use a commit from the most recently updated branch. For example, if the kernel repo is at <code>https://github.com/LineageOS/android_kernel_motorola_ghost.git</code>, enter: <code>_repository="android_kernel_motorola_ghost"</code>.

<syntaxhighlight lang="bash">
_flavor="wiki-example" # Be sure it's in form of <vendor-codename>, e.g. motorola-ghost

# Source
_repository="(CHANGEME!)"
_commit="ffffffffffffffffffffffffffffffffffffffff"
_config="config-${_flavor}.${arch}"
source="
    $pkgname-$_commit.tar.gz::https://github.com/LineageOS/${_repository}/archive/${_commit}.tar.gz
    $_config
    gcc7-give-up-on-ilog2-const-optimizations.patch
    gcc8-fix-put-user.patch
"
builddir="$srcdir/${_repository}-${_commit}"
</syntaxhighlight>

==== Kernel version ====
In the repository with the kernel source code, you will find a <code>Makefile</code>. Open this file and adjust the <code>pkgver</code> in the kernel <code>APKBUILD</code> to the information from the <code>VERSION</code>, <code>PATCHLEVEL</code> and <code>SUBLEVEL</code> variables (e.g. [https://github.com/LineageOS/lge-kernel-mako/blob/c76e1bc83219088b2ff1b2b5709a88ebda5e54e4/Makefile#L1-L3 3.4.0]).

==== Defconfig ====
Next you will need to [[How-to-find-device-specific-information#Kernel_defconfig_.28default_config.29|find the kernel configuration]], that is used to compile that kernel source for your device. Download it and save it as <code>aports/device/linux-wiki-example/config-wiki-example.armhf</code> (replace <code>wiki-example</code> and <code>armhf</code>).

<syntaxhighlight lang="shell-session">
$ wget https://github.com/LineageOS/lge-kernel-mako/raw/cm-14.1/arch/arm/configs/lineageos_mako_defconfig
$ mv lineageos_mako_defconfig aports/device/linux-wiki-example/config-wiki-example.armhf
</syntaxhighlight>

==== Download sources and update checksums ====
Use the checksum command. It will not only generate the checksums of all source files, but also download them in case they have not been downloaded yet. If this command fails, most likely the download URL is invalid and needs to be adjusted in the <code>APKBUILD</code> again. Another cause could be, that the defconfig could not be found (e.g. because it was saved with a wrong file name). The actual download URL (with all variables replaced) and the download progress are visible in the log window.

<syntaxhighlight lang="shell-session">
$ pmbootstrap checksum linux-wiki-example
</syntaxhighlight>

==== Kernel configuration ====
{{note|If <code>pmbootstrap</code> throws an error here, you need to [[#Remove failed patches|remove the example patch]]!}}
The magic command, which lets you change the kernel configuration is <code>pmbootstrap kconfig edit linux-wiki-example</code>. Don't try to manually change the defconfig file, because only by running menuconfig, the dependencies will get resolved properly. <code>menuconfig</code> always runs on the kernel with all patches applied, so we'll run it once to see if we need to remove patch files first.

===== Remove failed patches =====
You will find some example patches already in the generated kernel package. When a patch does not apply correctly, you will get something like the following in the log window (scroll up, the error is above the <code>^^^</code> line).

<syntaxhighlight lang="shell-session">
$ pmbootstrap kconfig edit linux-wiki-example
</syntaxhighlight>
<pre>
>>> linux-wiki-example: Unpacking /var/cache/distfiles/linux-wiki-example-ffff.tar.gz...
>>> linux-wiki-example: 01_msm-fix-perf_trace_counters.patch
patching file arch/arm/mach-msm/perf_trace_counters.h
Hunk #1 succeeded at 158 (offset 37 lines).
>>> linux-wiki-example: 02_this_patch_fails.patch
patching file arch/arm/mach-msm/perf_trace_counters.h
Hunk #1 FAILED at 121.
1 out of 1 hunk FAILED -- saving rejects to file arch/arm/mach-msm/perf_trace_counters.h.rej
>>> ERROR: linux-wiki-example: all failed
</pre>

When this happens, remove the failing patch from the <code>source=</code> variable in the <code>APKBUILD</code>, and delete the patch file from the same folder. Finally, correct the checksums and try kconfig edit again.

<syntaxhighlight lang="shell-session">
$ nano aports/device/linux-wiki-example/APKBUILD # remove from source
$ rm aports/device/linux-wiki-example/02_this_patch_fails.patch
$ pmbootstrap checksum linux-wiki-example
$ pmbootstrap kconfig edit linux-wiki-example
</syntaxhighlight>

===== Make kconfig check happy =====
{{note|Consider using <code>kconfig edit -x</code> or <code>-g</code> to get a GUI instead of the terminal interface. Details: <code>pmbootstrap kconfig edit -h</code>}}
Check what you need to adjust in the kernel config before it can be used with postmarketOS. Keep [[Kernel_configuration|changing the options]], until everything passes.

<syntaxhighlight lang="shell-session">
$ pmbootstrap kconfig check
$ pmbootstrap kconfig edit wiki-example
$ pmbootstrap kconfig check
</syntaxhighlight>

==== Kernel compilation ====
Next up is the kernel compilation, which will fail a few times before you get it working. Run it once to see where it fails.

<syntaxhighlight lang="shell-session">
$ pmbootstrap build linux-wiki-example
</syntaxhighlight>

We most likely use a more modern version of GCC compared to what your device kernel was intended to be compiled with (which is good, we don't want outdated software). However, this means that you will probably need to patch your kernel before it compiles successfully. Don't be scared, we'll talk you through it. But in the unlikely case, that everything runs through smoothly, continue reading [[#Documentation|here]].

==== Find the error message ====
In the log window, scroll up until you find the first message containing <code>error:</code> or <code>Error</code> (examples below). Read on for some tips on how to make this easier, if you can't find it right away.

<pre>
In file included from arch/arm/mach-msm/perf_trace_counters.h:127:0,
                 from arch/arm/mach-msm/perf_trace_counters.c:14:
include/trace/define_trace.h:79:43: fatal error: ./perf_trace_counters.h: No such file or directory
</pre>

<pre>
drivers/built-in.o: In function `.LANCHOR1':
msm_iommu_sec.c:(.data+0x9298): undefined reference to `kgsl_iommu_sync_lock'
msm_iommu_sec.c:(.data+0x929c): undefined reference to `kgsl_iommu_sync_unlock'
Makefile:877: recipe for target '.tmp_vmlinux1' failed
make: *** [.tmp_vmlinux1] Error 1
</pre>

To get an error log, where the actual error message is not mixed with jobs running in parallel, please run the compilation again with only one job enabled. In general, this makes it slower. But don't worry, we use <code>ccache</code>. Therefore everything you have already compiled once will be faster when compiled again.

<syntaxhighlight lang="shell-session">
$ pmbootstrap -j1 build linux-wiki-example
</syntaxhighlight>

If you still can't find it, try it with a text editor. The log is stored in <code>~/.local/var/pmbootstrap/log.txt</code> (or in whichever work folder you have specified in the initialization step). It is even possible to clear the log file right before compilation, when you press <code>CTRL</code> + <code>C</code> in the log window and use <code>log -c</code>:

<syntaxhighlight lang="shell-session">
(old log output here)
^C
$ pmbootstrap log -c
</syntaxhighlight>

Another trick to find the error message real quick, is to open <code>log.txt</code> with <code>less</code> and use the follow mode (press <code>F</code> while in <code>less</code> or open less with the <code>+F</code> option: <code>less +F log.txt</code>). This causes <code>less</code> to behave like <code>tail -f</code>. When an error occurs, you can exit the follow mode by pressing <code>CTRL-C</code> and use <code>?</code> to reverse search the output (for example: <code>?error</code>). Press <code>F</code> to re-enable follow mode.

==== Get a patch ====
===== From postmarketOS aports =====
It is highly likely, that we already ran into the same issue with another kernel. Take (parts of) the offending file name and search for it inside <code>aports/device</code>.

<syntaxhighlight lang="shell-session">
$ grep -r 'perf_trace_counters\.c' aports/device/
aports/device/linux-lg-mako/01_msm-fix-perf_trace_counters.patch:In-tree compilation for arch/arm/mach-msm/perf_trace_counters.c was
aports/device/linux-lg-mako/01_msm-fix-perf_trace_counters.patch:                     from arch/arm/mach-msm/perf_trace_counters.c:14
$ grep -r 'msm_iommu_sec' aports/device/
aports/device/linux-lg-mako/02_gpu-msm-fix-gcc5-compile.patch:msm_iommu_sec.c:(.data+0x9298): undefined reference to `kgsl_iommu_sync_lock'
aports/device/linux-lg-mako/02_gpu-msm-fix-gcc5-compile.patch:msm_iommu_sec.c:(.data+0x929c): undefined reference to `kgsl_iommu_sync_unlock'
</syntaxhighlight>

When there is a result, copy the patch file you found to your new kernel package, add it to the <code>source</code> variable in the <code>APKBUILD</code> and try building again.

<syntaxhighlight lang="shell-session">
$ cp aports/device/linux-lg-mako/01_msm-fix-perf_trace_counters.patch aports/device/linux-wiki-example/
$ nano aports/device/linux-wiki-example/APKBUILD # add it to source
$ pmbootstrap checksum linux-wiki-example
$ pmbootstrap build linux-wiki-example
</syntaxhighlight>

===== From elsewhere =====
Fire up your favorite search engine, and look at all results for the error message and variations of it. The <code>""</code> feature of most search engines is useful, so it searches for an exact string and not single words. Example queries for the error messages above:
* <code>include/trace/define_trace.h: fatal error: ./perf_trace_counters.h: "No such file or directory"</code>
* <code>linux "./perf_trace_counters.h: No such file or directory"</code>
* <code>android "undefined reference to `kgsl_iommu_sync_unlock'"</code>

In most cases, this will yield a patch that you can apply to your kernel. Save what you have found as a patch file right next to the <code>APKBUILD</code> of your new kernel package. Mailing list posts are usually in the format of a patch file and can be used directly, while commits or pull requests (PRs) on GitHub can be downloaded as patch when you append <code>.patch</code> to the URL (e.g. [https://github.com/ShinySide/HispAsian_Lollipop_G6/commit/b7756b6fc4bb728722b14d2dfdbaf1dc843812e9 commit], [https://github.com/ShinySide/HispAsian_Lollipop_G6/commit/b7756b6fc4bb728722b14d2dfdbaf1dc843812e9.patch patch]).

If what you found on the web can't be used as patch file directly (e.g. sometimes the files are in other folders), but you understood how you would need to patch the source (from the search results or simply because you already knew), please follow [[How_to_create_a_patch_when_packaging_software|this guide]].

Patch files can contain arbitrary text before the first line with <code>---</code> in the file. Please use this space to link to the source where you found a patch (in case it is from the Internet) and to paste the error message, that your patch fixes (so it is easier to find for other people).

After creating the patch file and adding the source URL and error message, put the file name into <code>source</code> in your <code>APKBUILD</code> and give it another shot.

<syntaxhighlight lang="shell-session">
$ nano aports/device/linux-wiki-example/03_description-here.patch
$ nano aports/device/linux-wiki-example/APKBUILD
$ pmbootstrap checksum linux-wiki-example
$ pmbootstrap build linux-wiki-example
</syntaxhighlight>

We can't promise anything, but you shouldn't need to do this more than 2 times or so, before the kernel build finally goes through.

===== Using GCC6 =====
If you can't make your kernel compile or boot with the latest GCC from Alpine, and you are pretty sure that the issues are specific to the GCC version, you can also [[Vendor_kernel_specific_package#Use_GCC_6|use GCC6 instead]].

===== Using GCC4 =====
As GCC4 was recently introduced in postmarketOS repos, you can follow the procedure for GCC6 above and replace all gcc6 occurrences with gcc4 and add <nowiki>gcc4 (armv7/armhf/...)-gcc4</nowiki> to your list of dependencies.

=== Device specific package ===
Open the <code>deviceinfo</code> file in an editor (replace <code>wiki-example</code>).

<syntaxhighlight lang="shell-session">
$ nano aports/device/device-wiki-example/deviceinfo
</syntaxhighlight>

Now adjust:

* <code>deviceinfo_screen_width</code>
* <code>deviceinfo_screen_height</code>

In case you were asked for <code>boot.img</code> analyzing, and skipped that section during [[#Flash_method|init]]: You can run <code>pmbootstrap bootimg_analyze path/to/boot.img</code> to get the right values for the <code>deviceinfo_flash_offset_</code> lines now. Filling out manually also works, but that is error-prone and therefore not recommended.

See [[deviceinfo reference]] for a listing of all available variables and their meanings. The [[device specific package]] article explains advanced customization of the <code>APKBUILD</code>.

=== We are happy to help you! ===
If you get stuck, we are happy to help you [[Matrix and IRC|in the chat]] and in the  [https://github.com/postmarketOS/pmbootstrap/issues issues tracker]. When asking for help, always include the APKBUILD you have written, and any custom patches you have applied, as well as the error message you have gotten from <code>pmbootstrap log</code>.

=== Documentation ===
This is a wiki, so '''please adjust everything that isn't detailed enough or would have helped you with porting.'''

More importantly, if you are at this point, it is a good idea to start writing your porting '''progress to the [[Devices]] page''', even if you didn't get very far and the kernel does not compile (it will help others to continue from your work). Simply register in the wiki (you don't even need an e-mail address) and [[Help:Device Page|follow this tutorial]].

=== Installation ===
{{note|If you get a "no space left on device" error, please report in {{issue|928}}.}}

Create checksums and build the device package once to make sure it doesn't contain errors at this point (we didn't do that earlier, because <code>pmbootstrap</code> would have complained about the invalid <code>pkgver</code> of the kernel package):
<syntaxhighlight lang="shell-session">
$ pmbootstrap checksum device-wiki-example
$ pmbootstrap build device-wiki-example
</syntaxhighlight>

To install to the system partition of an image file, run the following:

<syntaxhighlight lang="shell-session">
$ pmbootstrap install
</syntaxhighlight>

If you want to install to a SD card, insert it '''into your PC''' and run the following. Replace mmcblk0 with the actual device name (<code>lsblk</code> is handy to find out the correct device name). You don't need to format or partition it beforehand, <code>pmbootstrap</code> will take care of that.

<syntaxhighlight lang="shell-session">
$ pmbootstrap install --sdcard=/dev/mmcblk0
</syntaxhighlight>

=== Flashing ===
Before you can run any flash command, you must put your device in the flashing/bootloader mode. It is usually done holding Volume Down &amp; Power simultaneously when the device is switched off but it may vary depending on the device. For more information see the specific page for your device in the [https://wiki.lineageos.org/devices LineageOS Wiki].

If you want to install to the system partition, run the following (not for the SD card installation!):

<syntaxhighlight lang="shell-session">
$ pmbootstrap flasher flash_rootfs
</syntaxhighlight>

In case your system partition is too small for the generated image (e.g. because you chose Plasma Mobile as UI), it is possible to flash to another partition as well. Just be sure to erase any previous installations of postmarketOS in other partitions, because the init script will start with the first one that it encounters. (To delete a previous version either use <code>dd</code> or simply install the known working OS, e.g. Android, on it). Using multiple partitions with LVM is planned ({{issue|60}}).
<syntaxhighlight lang="shell-session">
$ pmbootstrap flasher flash_rootfs --partition userdata
</syntaxhighlight>

If you have a device, that works with fastboot, you can boot the kernel now without flashing it:

<syntaxhighlight lang="shell-session">
$ pmbootstrap flasher boot
</syntaxhighlight>

Otherwise, you will need to flash the kernel to the device boot partition:

<syntaxhighlight lang="shell-session">
$ pmbootstrap flasher flash_kernel
</syntaxhighlight>

=== Alternatives to regular flashing ===
If the flashing method does not work, it is also possible to export all generated image files to a specific directory (with symlinks), so you can flash it manually with your host Linux system (or even on Windows with proprietary flashers such as Odin, if this is the only way it works for you):

<syntaxhighlight lang="shell-session">
$ pmbootstrap export
$ pmbootstrap export --odin
</syntaxhighlight>

For Android based devices, you can do a [[Android_Recovery_Zip_Installation|recovery zip installation]].

When all else fails, you might have success with installing via [https://github.com/postmarketOS/pmbootstrap/issues/456 netcat] or booting via [https://github.com/postmarketOS/pmbootstrap/pull/547 NFS].

=== USB Network ===
If you are lucky, your screen may give some clues that you are booted into pmOS. If not, do not get discouraged, the graphics on your device may not yet be setup correctly. The next steps are to see if you can connect to the device through [[USB Network|SSH over USB]] (or if that fails, via telnet). See the [[Boot process]] and [[Inspecting the initramfs]] pages for more details.

It is quite easy to give your phone [[USB Internet|Internet access via USB]], when your PC is connected to the Internet.

In case it looks like your device did not even boot, have a look at [[Troubleshooting:boot]].

=== Upstreaming ===

As soon as USB networking is functional, or you have another indication that booting the device works successfully, it is time to upstream your work into the official [https://gitlab.com/postmarketOS/pmaports/ pmaports] repository. This way other people can benefit from your work, and build upon it.

See the [[git workflow]] article for detailed instructions.

=== Display ===
To make the display work in the first place, read [[Troubleshooting:display]] and [[Tuning sysfs]]. Then [[Screen_Calibration#Touch_screen|configure your touch screen]].

After you have it working, please take some [[Making_good_photos|nice photos]] and add them to your device's wiki page. If you have a Reddit account, consider posting them in [https://www.reddit.com/r/postmarketOS/ /r/postmarketOS] as well.

=== Changing your installation ===
==== Install packages over SSH ====
Get Internet access via [[USB Internet|USB]] (easier) or [[Wifi]], then use the package manager to install new packages:
<syntaxhighlight lang="shell-session">
$ apk add hello-world
</syntaxhighlight>

You can also [[Installing_packages_on_a_running_phone|host packages you have built yourself]] from your PC. Just make sure to increase the package version when you build your own version of a package, that already exists. Otherwise the package manager can not know that your package is the newest one and should be installed. Check the output of <code>apk</code> to see whether it is really installing the package or not.

==== Building a new system image ====
Whenever you rebuild a package (or pick a new one to be installed by default in <code>pmbootstrap init</code>), you need to make sure that the package is actually installed in the chroot from which the system image gets generated. Achieve that by running <code>pmbootstrap install</code> again, it should update all outdated packages. Pay attention to the output of <code>pmbootstrap log</code> to see if it actually has been updated.
If something did not work as expected, you can always <code>pmbootstrap zap</code> your chroots to start over with a clean installation.

==== Kernel ====
A simple way to recompile your kernel (e.g. because you want to change your kernel config) and flash it to your device is running the following commands:
<syntaxhighlight lang="shell-session">
$ pmbootstrap build --force linux-wiki-example
$ pmbootstrap install
$ pmbootstrap flasher flash_kernel
</syntaxhighlight>

The last flash_kernel step is only needed if your device has the kernel stored on an extra boot partition.
Android/fastboot compatible devices have such a partition, Nokia devices (N900 etc.) don't. If your device does ''not'' have a boot partition, update your system partition or SD card.

After you've gotten more familiar with postmarketOS, you could try out the <code>postmarketos-update-kernel</code> as well. It allows you to flash a new kernel to the device's <code>boot</code> partition ([[Partition-layout#Android_internal_storage|not to be confused]] with postmarketOS' own boot subpartition <code>systemp1</code>).

=== Full disk encryption: osk-sdl support ===
{{note|Our charging application <code>charging-sdl</code> uses the same software stack as <code>osk-sdl</code>, so following the instructions should make both components work.}}
If the display and the touchscreen interface are working, then it's time to add support for <code>osk-sdl</code>, so that you are able to use full disk encryption on the root filesystem. Instructions for adding support can be found here: [[Osk-sdl#Porting_to_New_Devices|Porting osk-sdl to New Devices]]

=== Advanced topics ===
{{note|Out of ideas what to do next with postmarketOS? Check out the [https://postmarketos.org/blog/2018/06/09/one-year/#get-involved get involved] section from the last big blog post!}}
* [[User-Interfaces]]
* [[WiFi]]
* [[Audio]]
* [[Modem]]
* [[Mainline kernel]]
* [[Existing Alpine installation]]
* [[Hybris]]

[[Category:Guide]]
