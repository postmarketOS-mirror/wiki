== Framebuffer ==

On most Android devices, a somewhat working framebuffer is required to get Weston and other Wayland compositors running. The alternative to framebuffer would be [[Glossary#dri|DRI]].

If your framebuffer does not work out of the box, try the following:

* Boot TWRP/Android and read out the correct framebuffer configurations from the /sys... paths and try to set them in pmOS
* If you made it work, create an initfs hook, that instantly sets the framebuffer right. [https://github.com/postmarketOS/pmbootstrap/blob/ad17254e86b7dab4f87e139eaeb298222f37a031/aports/device/device-lg-mako/initfs-hook.sh Example]

If the screen looks laggy, it might be a known issue with refresh rate. It can be solved by hardcoding the refresh rate in the video driver, see [https://github.com/postmarketOS/pmbootstrap/blob/ad17254e86b7dab4f87e139eaeb298222f37a031/aports/device/linux-sony-amami/mdss_fb_refresh_rate.patch mdss_fb_refresh_rate.patch].

== Touch screen ==

=== libinput ===
This library is used by almost everything accessing your touch screen (e.g. Weston, X11, kwin). Just follow [[Osk-sdl#Set_touchscreen_device|these instructions]] to set your <code>deviceinfo_dev_touchscreen</code> variable in the [[deviceinfo]] file.

Modern [[Device specific package|device specific packages]] will generate the udev-rule automatically then, and as nice side-effect it will also work in <code>osk-sdl</code>.

(If your device package does not generate the udev rule, please adjust the <code>build()</code> and <code>install()</code> functons as described [[Device specific package|here]].)

==== Calibration (needed for resistive touch screens and or when the touch screen is rotated) ====
Please test first if your device works without any special calibration - in most cases you don't need it!

* Install postmarketOS with Weston on your phone
* Connect to your phone via SSH
* Run <code>weston-calibrator</code>
* (Optional) check below how to adjust the values. As it is hard to hit the crosses in weston-calibrator exactly you will get slightly wrong values easily but usually it is also easy to find out what the exact values are.
* Adjust your <code>deviceinfo_dev_touchscreen_calibration</code> to the output from <code>weston-calibrator</code> ([https://github.com/postmarketOS/pmbootstrap/pull/1034/files#diff-21ee1b263b9df2c4b69bb4b6796dab37 example]).

==== Adjust the generated values ====

Let the 6 calibration values be <code>A B C D E F</code>. Then the x and y coordinate of the touch input are translated into <code>x' = Ax + By + C</code> and <code>y' = Dx + Ey + F</code> according to [https://github.com/postmarketOS/pmbootstrap/issues/182 #182].
Basically this means the following:

* Unless your touchscreen is slightly rotated (i.e., not 90° but like 1° or 2°), which is very unlikely, either A and E or B and D should be 0. If you get values close to 0 (i.e., smaller than 0.1 or so, larger values if you were not so precise) just set them to 0.
* The non-zero values of A, B, D and E should usually be 1 or -1. If you get values close to that, just set them to 1 or -1. At least for the Samsung n5110 <code>weston-calibrator</code> returned the aspect ratio of the screen (i.e., width/height or height/width) for these values. While this might be another likely value, it turned out to be wrong and 1/-1 turned out to be correct.
* The remaining two values, C and F, are pixel offsets. Therefore, you can easily get -20 or +17 here depending on how accurate you were. If your touchscreen has the same size as the display, these values should be either set to 0 or the display width or height (then probably in combination with a -1 for the same dimension, e.g. "0 1 0 -1 0 800" for a display height of 800px). Note that these last values have a different meaning in Xorg/libinput: here, it seems, the values are multiplied by the device width/height, so instead of the height/width, use 1.

If you have doubts if a certain value should be 0 or not, a good test is also to just run <code>weston-calibrator</code> multiple times. If the value is sometimes positive, sometimes negative, it should be 0.

== Legacy ==
=== libinput: old method ===
{{syslog|weston}}
Here is how to do it without <code>devicepkg-dev</code> (not recommended, for reference only).

* Make sure, that Weston runs on the device
* Look in the logs (via SSH) for the touch device name. For <code>lg-mako</code>, the name is <code>touch_dev</code>, but it may be different for your device.
* Copy [https://github.com/postmarketOS/pmbootstrap/blob/master/aports/device/device-lg-mako/90-android-touch-dev.rules 90-android-touch-dev.rules] from <code>device-lg-mako</code> to your device's aport. Replace <code>touch_dev</code> with your touch device name. Adjust the <code>APKBUILD</code>, so it gets installed properly ([https://github.com/postmarketOS/pmbootstrap/blob/master/aports/device/device-lg-mako/APKBUILD Example])

<pre>
SUBSYSTEM==&quot;input&quot;, ATTRS{name}==&quot;touch_dev&quot;, \
ENV{ID_INPUT}=&quot;1&quot;, ENV{ID_INPUT_TOUCHSCREEN}=&quot;1&quot;
</pre>
Reload udev rules:

<source lang="bash"># Reload all rules
udevadm control --reload
# Re-apply those rules on all devices
udevadm trigger</source>
