[[Category:Socs]]

{{todo|Have some introduction here}}
== Why? ==

Mainlining is a fairly complicated process, especially if you're one of the first to start work on a given SoC. However through community effort there is a growing number of SoCs that have increasingly stable mainline ports (see below). In general it is relatively simple to take your existing Android kernel and boot it without any of the Android blobs, however from that point it can be a lot of working to create a working system and at the end of it you don't receive any security patches or general improvements.

Apart from purely practical insufficiencies, the cold hard truth is that the downstream code is simply not meant to be maintained or get used outside Android. The code quality is often several magnitudes worse, which makes maintenance rather complicated. Often large parts of the drivers are moved into proprietary parts in Android userspace - which are generally impossible to use without emulating the expected Android environment. At the end, the effort to make such drivers work properly on long term is often as much as rewriting them properly for mainline.

Successfully mainlining an SoC or device means that you benefit from every improvement the Linux kernel has to offer, you can run a fairly standard Linux distro (in theory even ''any'' Linux distro) and benefit from kernel updates and improvements without needing to compile your own kernel or deal with frustrating patches. A notable easy-to-notice benefit of running mainline is minimal-effort-needed GPU support for almost all GPUs (except PowerVR unfortunately), which is needed for using modern phone DEs like Plasma Mobile or Phosh with acceptable performance. Lastly, mainlining is a terrific learning opportunity that you will never regret.

If your device's SoC is in the list below there's a very decent chance that you can get the same functionality working on your device and eventually upstream your patches to the kernel, helping to build a solid base for other devices too!

{{todo|Explain process for previous devices that now run mainline quite well}}

== Getting Started ==

=== Supported SoCs ===
Some SoCs are already supported quite well and are used for some devices in postmarketOS. Getting started with one of these might be more easy for you, because you can get help from others working with the same SoC. The feature matrix below shows which features are already supported for a particular SoC. The pages for each SoC will provide more information, plus hints how to get started and who you can contact.

* '''CPU:''' SMP (bring up secondary CPU cores), CPU frequency scaling, CPUidle
* '''Storage:''' eMMC, SD cards, UFS, ...
* '''Video:''' Hardware-accelerated video de/encoding
* '''Modem:''' Calls, SMS, Internet
* Unavailable (-) means that such a feature is not built directly into SoC. For example, WiFi/BT are also often used through SDIO/UART which can be chosen independently from the SoC.
'''Note:''' The statuses displayed below signify if a particular feature was tested on a device by someone in the postmarketOS community - not necessarily the components supported in the mainline kernel.

{{#cargo_query:
tables=Socs
|fields=CONCAT( '[[', _pageName, '|',Manufacturer,' ',Name,']]' )=SoC,Arch,Year,StatusCpu=CPU,StatusStorage=Storage,StatusUsb=USB,StatusDisplay=Display,StatusGpu=GPU,StatusPinctrl=Pinctrl,StatusI2c=IÂ²C,StatusAudio=Audio,StatusVideo=Video,StatusThermal=Thermal,StatusWiFi=WiFi,StatusBluetooth=BT,StatusModem=Modem,StatusCamera=Camera
|order by=Socs.Manufacturer, Socs.Name
|format=table
|limit=9999
|more results text=
}}

== Materials to look into ==
This section include many useful sources to help you with mainlining as possible.

Intro:
* [https://www.youtube.com/watch?v=77tuFtM4gjA Introduction into how mainlining is done] (52:37)

Basics:
* [https://www.youtube.com/watch?v=NNol7fRGo2E Introduction into ARM architecture, 2017] (46:33)
* [https://www.youtube.com/watch?v=m_NyYEBxfn8 Device Tree (DT) introduction, 2013] (1:12:14)
* [https://www.youtube.com/watch?v=PgQezmlst0w Device Tree: present, past, future, 2018] (37:28)
* [https://www.youtube.com/watch?v=LPG4EkXK9Us ARM64 SoC Linux Support Check-List, 2017] (42:38) ''Very useful step-by-step guide what should be done to bring in SoC support''
* [https://www.youtube.com/watch?v=RBB6qKLUpd8 Upstreaming ARM64 SoC's easier than before, 2019] (19:03)

Specific topics:
* [https://www.youtube.com/watch?v=z4EkzJDGxFo Pin Control and GPIO, 2013] (48:03) talk by [[Special:Contributions/Linusw|Linus Walleij]]
* [https://www.youtube.com/watch?v=Mwr7eZUm1Nw Common Clock Framework: How To Use It, 2013] (44:50) ''Not so useful, old and only a basic overview''
* [https://www.youtube.com/watch?v=Puv4mW55bF8 Timekeeping in the Linux Kernel - Stephen Boyd, Qualcomm Innovation Center, 2017] (34:41) ''About how clocksource works.''
* [https://www.youtube.com/watch?v=l2ZSsOkfnz0 Linux Kernel Display Architecture, 2013] (56:53) ''DRM/KMS, MIPI DSI, panels,... slightly old, need something newer.''
* [https://www.youtube.com/watch?v=UG7tMZM24UU Demystifying Linux MIPI DSI Subsystem - Jagan Teki, 2019] (41:57) ''MIPI DSI, controllers, bridges, panels, DRM/KMS...''
* [https://www.youtube.com/watch?v=GsDWgm0YiaU Power Management Integrated Circuits: Keep the Power in Your Hands, 2017] (39:44) ''About PMICs, regulators, power supply, fuelgauge, ...''

== See also ==
* [[Mainlining Guide]] (very generic, parts are slowly incorporated into this page)
