{{Infobox soc
| name = MSM8916
| manufacturer = Qualcomm
| arch = aarch64
| year = 2014
| process = 28
| mainline = yes
| status_cpu = Y
| status_uart = Y
| status_storage = Y
| status_usb = Y
| status_display = Y
| status_gpu = Y
| status_pinctrl = Y
| status_i2c = Y
| status_audio = Y
| status_video = Y
| status_thermal = Y
| status_wifi = Y
| status_bluetooth =Y
| status_modem = P
| status_camera = 
| clock = v4.1-rc1 (ioommu, gpu, sound: v4.4-rc1)
| pinctrl = v4.0-rc1
| serial = v4.1-rc1
| gpu = Adreno A306 (v4.2-rc1 / v4.14-rc1)
| sdhci = v4.3-rc1
| usb_device = v4.3-rc1
| usb_host = v4.3-rc1
| usb_otg = v4.3-rc1
| sound = v4.2-rc1
| audio_codec = v4.10-rc1
| pmic = pm8916 (v4.5-rc1)
| cpuidle = PSCI* (v4.8-rc1)
| display_conroller-mipi = v4.9-rc1
| wifi = wcnss (v4.11-rc1)
| bluetooth = wcnss (v4.11-rc1)
| iommu = v4.14-rc1
| video_accel = venus (v4.14-rc1)
| cpufreq = v4.17-rc1
| cam_controller = v5.0-rc1*
}}

[https://www.qualcomm.com/products/snapdragon-processors-410 MSM8916]/[https://www.qualcomm.com/products/apq8016e APQ8016] (or Snapdragon 410) is Qualcomm SoC released in 2014, with great mainline support orginally added for the [https://www.96boards.org/product/dragonboard410c/ Dragonboard 410c]. There is a slightly higher clocked variant (CPU cores up to 1.4 GHz) available as Snapdragon 412.


== Devices ==
=== MSM8916 (Snapdragon 410) ===
{{#cargo_query:
tables=Devices
|fields=CONCAT( '[[', _pageName, '|',Manufacturer,' ',Name,']]' )=Device,Codename,StatusMainline=Mainline
|order by=Devices.Manufacturer, Devices.Name
|format=table
|limit=9999
|where=Booting and Devices.chipset='Qualcomm MSM8916 Snapdragon 410'
|more results text=
}}
=== APQ8016 (Snapdragon 410, WiFi-only) ===
{{#cargo_query:
tables=Devices
|fields=CONCAT( '[[', _pageName, '|',Manufacturer,' ',Name,']]' )=Device,Codename,StatusMainline=Mainline
|order by=Devices.Manufacturer, Devices.Name
|format=table
|limit=9999
|where=Booting and Devices.chipset='Qualcomm APQ8016 Snapdragon 410'
|more results text=
}}
=== MSM8916v2 (Snapdragon 412) ===
{{#cargo_query:
tables=Devices
|fields=CONCAT( '[[', _pageName, '|',Manufacturer,' ',Name,']]' )=Device,Codename,StatusMainline=Mainline
|order by=Devices.Manufacturer, Devices.Name
|format=table
|limit=9999
|where=Booting and Devices.chipset='Qualcomm MSM8916v2 Snapdragon 412'
|more results text=
}}

== Audio ==
=== PulseAudio ===
Audio should work out of the box with PulseAudio. In your favorite PulseAudio mixer (e.g. <code>pulsemixer</code> on the command line) you can select the output port to use (e.g. Speaker, Earpiece, ...).

=== ALSA ===
Everything is muted by default and must be enabled through alsaucm. Unfortunately, the tool is not very user-friendly.

 $ alsaucm -i -c hw:0
 set _verb HiFi
 set _enadev <device>

where <code><device></code> is one of <code>Speaker</code>, <code>Earpiece</code>, <code>Headphones</code>, <code>Mic1</code>, <code>Mic2</code> or <code>Headset</code>.
alsaucm does not track which devices are already enabled, therefore it is possible to produce combinations that won't work properly (e.g. <code>Headphones</code>+<code>Earpiece</code>). To switch between devices, the old device first needs to be re-enabled and then disabled:

 $ alsaucm -i -c hw:0
 set _verb HiFi
 set _enadev OLD
 set _disdev OLD
 set _enadev NEW

{{note|'''Warning:''' alsaucm sets the volume to maximum by default. It is possible to increase the volume even further, however, this may lead to permanent damage to your speaker!}}

== Modem ==
To use the modem, select the <code>mainline-modem</code> kernel instead of <code>mainline</code>, and make sure to agree to the usage of non-free firmware (required for the modem).

Note that this changes the way audio is routed on the device:
* Without modem, audio is routed directly to the audio hardware, and works without the need for non-free firmware.
* With modem running, audio must be routed through the audio DSP, which requires non-free firmware.

Therefore you should choose the kernel depending whether or not you would like to run the modem.

=== Usage ===
At the moment, the modem is primarily tested using the oFono test scripts.

 $ sudo apk add ofono-scripts py3-dbus
 $ /usr/lib/ofono/test/enable-modem
 $ /usr/lib/ofono/test/online-modem
 $ /usr/lib/ofono/test/list-modems

Check if the SIM card shows up. If you have a dual SIM device (e.g. [[Wileyfox_Swift_(wileyfox-crackling)|Wileyfox Swift]]), follow [[User:TravMurav/Dual-Sim_QMI_draft|this guide]]. (TODO: Maybe move this here or somewhere else?)

{{note|'''Note:''' Before using <code>qmicli</code> from that guide, make sure that oFono is stopped (<code>sudo rc-service ofono stop</code>). After selecting SIM slot, start oFono servce again.}}

Unlock the SIM card:
 $ /usr/lib/ofono/test/enter-pin pin <pin>

Eventually, your SIM card should show up as registering in <code>/usr/lib/ofono/test/list-modems</code>.

<code>ofonoctl</code> is also very useful test tool:

 $ sudo apk add ofonoctl
 $ ofonoctl list

=== SMS ===
Use the <code>send-sms</code> and <code>receive-sms</code> test scripts (the latter requires <code>py3-gobject3</code>).

 $ /usr/lib/ofono/test/send-sms "COUNTRYCODENUMBER" "Test SMS from oFono" 0
 Send message using modem /gobi_0 ...
 /gobi_0/message_9914F33A7C53DD6F080B38755E7D64FD59EA8F8F

== Mainlining ==
* MSM8916 is a great platform to get started with mainlining! It has a dedicated [[MSM8916 Mainlining]] guide that explains how to get started.
