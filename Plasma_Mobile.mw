{{note|Plasma Mobile doesn't work on armhf due to an [https://gitlab.com/postmarketOS/pmaports/issues/75 issue with <code>qt5-qtdeclarative</code>]. If your device is actually armv7 but still runs on armhf, please change it.}}

{{Infobox interface
| name = Plasma Mobile
| image = File:Plasma-mobile-hammerhead.jpg
| imagecaption = Plasma Mobile running on LG Nexus 5 (hammerhead)
| graphics = KWin on Wayland
| toolkit = Qt 5
}}

A mobile variant of the KDE Plasma [[User-Interfaces|user interface]], optimized for touchscreen.

== Status ==
{{note|Plasma Mobile is known to have problem with Android's framebuffer drivers (e.g. {{issue|1647}}). Works best with mainlined devices.}}
It works on most devices with a working display, both with hardware acceleration and software rendering. There is however an issue making it unable to run on armhf devices without hardware acceleration.


Do note that this interface is unbearably slow without hardware acceleration and is not recommended for devices without it.

== Installation ==
Using <code>pmbootstrap</code>, Plasma Mobile can be installed by selecting it as the UI in <code>pmbootstrap init</code>.

On existing systems, it can be installed by installing the <code>postmarketos-ui-plasma-mobile</code> meta package or <code>plasma-phone-components</code> if postmarketOS specific customization is not wanted.

== Starting Plasma Mobile ==

If <code>postmarketos-ui-plasma-mobile</code> is installed, Plasma Mobile will be automatically launched via the [https://github.com/canonical/lightdm LightDM] display manager.

It can also be launched manually by running the following script:
<pre>
#!/bin/sh

export QML2_IMPORT_PATH=/usr/lib/qt/qml:/usr/lib/qt5/qml
export QT_QPA_PLATFORMTHEME=KDE
export QT_QUICK_CONTROLS_STYLE=Plasma
export QT_WAYLAND_DISABLE_WINDOWDECORATION=1
export XDG_CURRENT_DESKTOP=KDE
export KDE_SESSION_VERSION=5
export PLASMA_PLATFORM=phone:handset
export QT_VIRTUALKEYBOARD_STYLE=Plasma
export QT_QUICK_CONTROLS_MOBILE=true
export QT_ENABLE_GLYPH_CACHE_WORKAROUND=1
sleep 2

if [ -d "/dev/dri" ]; then
	kwin_wayland --drm --xwayland plasma-phone 2>&1 | logger -t "$(whoami):plasma-mobile"
else
	# NOTE: using GALLIUM_DRIVER=llvmpipe might give you better performance (or not work at all.)
	# If it does give you a performance gain, please open an issue to discuss how to implement this properly.
	export GALLIUM_DRIVER=softpipe
	export KWIN_COMPOSE=Q
	export LIBGL_ALWAYS_SOFTWARE=1

	echo "startplasmamobile: using software rendering with: ${GALLIUM_DRIVER}" | logger -t "$(whoami):plasma-mobile"
	kwin_wayland --framebuffer --xwayland plasma-phone 2>&1 | logger -t "$(whoami):plasma-mobile"
fi
</pre>

=== Running Apps from SSH session ===
In order to run applications on the device, you need to set up your environment similar to the environment in which the plasmashell is running:

<source lang="bash>
export $(cat /proc/$(pidof plasmashell)/environ | tr '\0' '\n')
</source>

For the official KDE instructions on running Plasma Mobile, see [https://docs.plasma-mobile.org/RunningApps.html their website].

== Taking screenshots ==
In command line:
 qdbus org.kde.KWin /Screenshot org.kde.kwin.Screenshot.screenshotArea 0 0 1080 1920
qdbus-qt5 is from package qt5-qttools.

== Troubleshooting ==
=== Scaling ===
On devices such as [[Samsung_Galaxy_A5_2015_(samsung-a5ulte)]] and [[Moto_G4_Play_(motorola-harpia)]], you may need to set a custom scaling factor.

The following sets a 2x scale factor:

<code>kscreen-doctor output.1.scale.2</code>

If you're trying to run this from SSH session, you need to set extra env vars:

<code>XDG_RUNTIME_DIR=/run/user/10000 QT_QPA_PLATFORM=wayland kscreen-doctor output.1.scale.2</code>

=== Software rendering ===
Plasma can also be used if your device doesn't support hardware acceleration (if it's a non-armhf device) yet by using software rendering. Please note that the interface will be slow, and it might not be usable for the average user.

Software rendering is not enabled automatically for now. Make sure <code>mesa-dri-gallium</code> is installed (it contains swrast dri module).

Edit kwin wrapper startup script
 $ sudo nano /usr/bin/kwinwrapper
Comment out existing startplasma invocation command at the end of file and replace it with
<syntaxhighlight lang="shell">
export KWIN_COMPOSE=QPainter
export GALLIUM_DRIVER=softpipe
export LIBGL_ALWAYS_SOFTWARE=1

startplasma-wayland \
        --framebuffer \
        --xwayland \
        --libinput \
        --inputmethod maliit-server \
        --exit-with-session=/usr/lib/libexec/startplasma-waylandsession
</syntaxhighlight>

Then restart lightdm
 $ sudo rc-service lightdm restart

=== Log output ===
If Plasma is launched via LightDM using the <code>postmarketos-ui-plasma-mobile</code> package, logs can be viewed by running <code>logread | grep plasma-mobile</code>. The log can also be viewed live by running <code>logread -f</code>; anything related to Plasma and KDE will have a <code>$username:plasma-mobile</code> prefix.

=== Logging isn't verbose ===
One needs to enable debug logging for certain components in <code>~/.config/QtProject/qtlogging.ini</code>. Without that, you barely see any log output. We [https://github.com/postmarketOS/pmbootstrap/blob/917f03d5f9f015fa9fc0be8093d87b7f21d98d4a/aports/main/postmarketos-ui-plasma-mobile/APKBUILD#L27 ship such a qtlogging.ini file] in <code>postmarketos-ui-plasma-mobile</code> because Plasma Mobile is relatively new and we want to be able to debug it properly.

If the file did not get installed for you, please double check if it is there and report in [https://gitlab.com/postmarketOS/pmbootstrap/issues/1038 1038].

=== KWin doesn't work ===
{{note|Plasma Mobile shell uses some Wayland protocols, so you can't run it on X11 in case you tried to do that.}}
Please follow [https://blog.martin-graesslin.com/blog/2016/07/why-does-kwin_wayland-not-start/ these instructions] for debugging.

=== Some env vars that may help Angelfish browser ===
<source lang="bash">
# Recommended in https://bugreports.qt.io/browse/QTBUG-80665
export QTWEBENGINE_DISABLE_GPU_THREAD=1
# Flags are based on workaround for SFOS (disable-gpu-compositing) and default Android settings:
# Multiple Raster Threads: Disabled
# Flags enabled by Qt if enable-embedded-switches is given
export QTWEBENGINE_CHROMIUM_FLAGS="--disable-gpu-compositing --num-raster-threads=1 --enable-viewport --disable-composited-antialiasing"
</source>
( [https://github.com/sailfishos-flatpak/flatpak-runner/blob/a49f60f3347972eb673fc35b94c4ef1c2024297d/src/appsettings.cpp#L79 source] )

== Guide ==
Follow the [https://wiki.postmarketos.org/wiki/Display Display] guide to change and fix display related issues.

== See also ==
* [[Packaging-Plasma-Mobile|Packaging efforts]]

[[Category:Interface]]
