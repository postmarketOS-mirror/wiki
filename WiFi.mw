== General information ==
To get wireless LAN working, most WiFi chips need a proprietary firmware blob. While it would be more secure to replace that with open source software in the long term, it isn't feasible right now, so we try to get it working with that closed source firmware.<br />
A great place to start looking for information about many available WiFi chips is [https://wireless.wiki.kernel.org/en/users/drivers this kernel.org page]. It often provides driver sources and the required firmware blobs as well. For a start if you want Internet working try the [[USB Internet]] guide.

{{note|Instead of mounting Android's firmware partition, we package the files ourselves (see the [[FAQ#Why_don.27t_we_use_firmware_files_from_Android.27s_firmware_partition.3F|FAQ]]).}}

Useful links:
* [[Firmware|How to find WiFi firmware files]]
* [[Device_specific_package#Proprietary_firmware_or_userland_blobs|How to package WiFi firmware]]

== Qualcomm WiFi ==

Devices with Qualcomm WiFi chips are usually very easy to get working. 

You need to find the firmware files for your device, the main file is called <code>wcnss.mdt</code> and there should also be more files which are called <code>wcnss.b00</code>, <code>wcnss.b01</code>, etc. Copy them all onto your device info <code>/lib/firmware/postmarketos</code>.
There may also be files starting with WCNSS, e.g. <code>WCNSS_cfg.dat WCNSS_qcom_cfg.ini WCNSS_qcom_wlan_nv.bin</code> - those should go into <code>/lib/firmware/postmarketos/wlan/prima</code>. You can use existing firmware packages as examples for which files go where, e.g. <code>aports/firmware/firmware-xiaomi-armani</code>.

Then you can run as root <code>echo 1 > /dev/wcnss_wlan</code> and <code>echo sta > /sys/module/wlan/parameters/fwpath</code>. Check the output of <code>ip link</code> and a <code>wlan0</code> interface should have appeared! Now you can use NetworkManager to [[#Connecting_to_APs|connect to a WiFi]]!

If that didn't work, please check the [[#Debugging|debugging]] section how to find out what went wrong.

For packaging, see [[Device_specific_package#Proprietary_firmware_or_userland_blobs|that page]] and add the <code>wcnss-wlan</code> package (which runs the two commands above at boot automatically) as a dependency to the WiFi subpackage.

Test your packaging by flashing a new rootfs which includes your changes and see if WiFi works without any manual configuration.

== Broadcom WiFi ==

{{todo|This section needs expansion.}}

Devices with Broadcom WiFi chips usually have the path to the firmware hardcoded in the kernel, mostly to <code>/system/vendor/firmware</code>. 

In most cases you should be able to set <code>CONFIG_BCMDHD_FW_PATH</code> and <code>CONFIG_BCMDHD_NVRAM_PATH</code> in the kernel config. In other cases, you need to patch the kernel and change the path to <code>/lib/firmware/postmarketos</code> (see [https://gitlab.com/postmarketOS/pmbootstrap/blob/2fe8eb0fdfa37381d521844b6137c03593279002/aports/linux-samsung-i9070/04_change_dhd_firmware_dir.patch this patch].

You can use the command <code>git grep "lib/firmware/postmarketos" device/linux-*</code> in pmaports to find how it's done for other devices.

An example of how Broadcom was made to work can be found at [[Samsung_Galaxy_S_Advance_(samsung-i9070)#How_drebrez_made_wifi_work]] and [https://github.com/postmarketOS/pmbootstrap/pull/138/commits in the corresponding GitHub pull request]. Another example is [[Medion_Lifetab_S9714_(medion-kai)#How_bonsaiblue_made_wifi_work]].

Here's a quick rundown of the steps required to get Broadcom WiFi up and running:

* Locate the nvram and firmware files. You might be able to use the ones from <code>firmware-aosp-broadcom-wlan</code>, but if they don't work you can package your own.
* Modify your kernel config to point to the new firmware paths.
* Modify your kernel APKBUILD to build modules, so that you can use bcmdhd.
* Add a modules-load.conf file to your device package and put the bcmdhd module name (usually dhd) in it, then modify the APKBUILD to install the file. (This will auto-load the dhd module on startup.)

See the [https://gitlab.com/postmarketOS/pmaports/-/tree/master/device/testing/device-samsung-i9070 Galaxy S Advance device package], [https://gitlab.com/postmarketOS/pmaports/-/tree/master/device/testing/linux-samsung-i9070 Galaxy S Advance linux package] and [https://gitlab.com/postmarketOS/pmaports/-/tree/master/device/testing/firmware-samsung-i9070 Galaxy S Advance firmware package] for reference.

== Mediatek WiFi ==

{{todo|No device with a Mediatek SoC actually has WiFi working yet. Further debugging is needed to get it working.}}

Devices with Mediatek WiFi chips are much more complicated to get working. On MT6589 devices, there is a tool called <code>6620_launcher</code> which (probably) loads the firmware from the filesystem into the kernel. This tool is a binary included in the Android installation and linked against the bionic libc. There is a [https://github.com/MediaDeb/android_hardware_mediatek/blob/master/combo_tool/src/stp_uart_launcher.c source code version of the tool available] which can be compiled on a normal Linux system. On the [[Fairphone_1_(fairphone-fp1)|Fairphone 1]], the order for initialization should be the following (based on the init.rc files from Android):
<pre>
# Install the files mt6628_ant_m1.cfg mt6628_patch_e1_hdr.bin mt6628_patch_e2_0_hdr.bin mt6628_patch_e2_1_hdr.bin WIFI_RAM_CODE_MT6628 WMT.cfg into /system/etc/firmware/ (path could be patched in the kernel sources)
insmod mtk_hif_sdio.ko
insmod mtk_stp_wmt.ko
insmod mtk_stp_uart.ko
insmod mtk_stp_gps.ko
insmod mtk_stp_bt.ko
insmod mtk_wmt_wifi.ko

mknod /dev/stpwmt c 190 0
mknod /dev/stpgps c 191 0
mknod /dev/stpbt  c 192 0
mknod /dev/wmtWifi c 153 0

insmod wlan_mt6628.ko

6620_launcher -p /system/etc/firmware/

echo 1 > /dev/wmtWifi
</pre>

The MediaDeb project has made systemd unit files running more or less the commands above on two of their supported devices:
* wifi_loader.service: runs <code>mt6620_loader.sh</code> (which does <code>mknod</code>) & runs <code>wifi_loader</code> bin
* mt6620_launcher.service: runs 6620_launcher (<code>/usr/sbin/6620_launcher -b 4000000 -p /lib/firmware/ -d /dev/ttyMT2</code>)
* wifi.service: runs <code>echo 1 > /dev/wmtWifi</code>

== Debugging ==

First check, if the network interface is available by running <code>ip link</code> (<code>wlan0</code> on most phones).

If the network interface is not listed and you've followed the section for your WiFi chip above, it's most likely an error of missing or misplaced firmware files:
* <code>dmesg</code>
* <code>tail /var/log/firmwareload.log</code>

In case you need any more help, just ask in our [[Matrix_and_IRC|Matrix/IRC channel]]!

== Connecting to APs ==

=== Using NetworkManager ===

You can use NetworkManager from the command line either with <code>nmtui</code> (a terminal user interface) or <code>nmcli</code>.

To use <code>nmtui</code>, just run <code>sudo nmtui</code> in your terminal.

To use <code>nmcli</code>, you can use the following commands, modified for your use case:
<pre>
$ sudo nmcli device wifi list ifname wlan0
$ sudo nmcli device wifi connect "$SSID" password "$PASSWORD" ifname "wlan0"
</pre>

=== Using wpa_supplicant ===

{{note|In most cases using NetworkManager is preferred! You might need to set your wlan interface to unmanaged in NetworkManager or stop NetworkManager to configure it manually.}}

postmarketOS currently configures the wpa_supplicant service to start on boot. This service will fail to start unless <code>/etc/wpa_supplicant/wpa_supplicant.conf</code> has been defined. This can be configured using the <code>wpa_passphrase</code> utility:

<pre>$ wpa_passphrase YOUR_SSID YOUR_PASSPHRASE | sudo tee /etc/wpa_supplicant/wpa_supplicant.conf</pre>

Note: If you are connecting to a hidden wireless network, make sure to add line "scan_ssid=1" after the ssid line in your generated conf file

Next you'll need to set up the <code>networking</code> service by adding interfaces to <code>/etc/network/interfaces</code>. In some cases, the loopback device may need to precede the wlan interface:

<pre>auto lo 
iface lo inet loopback 
auto wlan0 
iface wlan0 inet dhcp</pre>
Finally, set the networking service to start on boot:

<pre>$ sudo rc-update add networking default</pre>
Note that on some systems (e.g. the RX51 [this seems not to be required on RX-51 as of 16th May 2018 but YMMV]) you may have to configure wpa_supplicant to use the Linux kernel wireless extensions by editing <code>/etc/conf.d/wpa_supplicant</code>:

<pre>wpa_supplicant_args=&quot;-Dwext&quot;</pre>
You will have to reboot, or manually restart the aforementioned services, before your device will connect to the access point.

=== Using wpa_supplicant (manually) ===

If you experience problems or just want to test wifi you can start wpa supplicant (using -Dwext or nl80211 driver) and the dhcp service:

<pre>
sudo wpa_supplicant -u -Dnl80211 -B -c /etc/wpa_supplicant/wpa_supplicant.conf -iwlan0
sudo udhcpc -i wlan0
</pre>

== See also ==
* [[Samsung_Galaxy_S_Advance_(samsung-i9070)#How_drebrez_made_wifi_work|samsung-i9070: How drebrez made wifi work]]

[[Category:Guide]]
