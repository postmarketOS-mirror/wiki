== Overview ==
Once you press the power button on your device with a postmarketOS installation, it goes through the following steps:

# Device specific bootloaders
# postmarketOS initramfs
# OpenRC
# LightDM (if UI is not none, otherwise it stops at OpenRC)
# User Interface of choice (Plasma Mobile, Phosh, ...)

== Device specific bootloaders ==
There are multiple stages of bootloaders passed before arriving at the postmarketOS initramfs. The first stages are not that relevant to understand the postmarketOS booting process, as they take care of very low level things, such as DRAM calibration. It gets interesting at the last stage of these device specific bootloaders, which is oftentimes some LK derivative, or on more libre or liberated devices, it may be u-boot.

=== LK (Android) ===
[https://github.com/littlekernel/lk LK (Little Kernel)] loads a <code>boot.img</code> file, that was directly written to the Android boot partition of the device (without any partitioning, just the file directly; this is ''not'' the postmarketOS boot partition, see [[Partition_Layout|partition layout]]). This file consists of the postmarketOS Linux kernel and initramfs, which we flash to that partition during the installation. Flashing instructions are passed to LK with the <code>fastboot</code> command (abstracted in <code>pmbootstrap flasher</code>).

Notably LK does not allow to boot a different kernel from an SD card (without hacks like chainloading another bootloader that is stored in <code>boot.img</code>, which potentially increases the boot time and is a whole lot of effort to implement). LK is licensed under the MIT license, without copyleft, meaning that vendors are not required to release the source code of their LK bootloader forks. In practice, they end up being proprietary - we don't get the source code and can't make changes.

==== isorec ====
Very few Android devices don't expect a <code>boot.img</code> file written to the Android boot partition, but rather just the Linux kernel, with an embedded initramfs. But we want the initramfs packaging to be independent of the kernel (not require a kernel rebuild to change the initramfs!). Therefore we use the so-called "isorec" trick here: the initramfs script built into the kernel is just a very small stub, that loads the real initramfs from the postmarketOS boot partition ([https://gitlab.com/postmarketOS/pmaports/-/blob/1d2b62a1094e77e50e1a52c48b07eecb1fbfd26a/device/testing/linux-samsung-i9100/APKBUILD#L31-50 example]).

=== u-boot ===
[https://www.denx.de/wiki/U-Boot/ Das U-Boot] is highly configurable. When used with postmarketOS, it usually loads the postmarketOS Linux kernel and initramfs from the postmarketOS boot partition, where they live as dedicated files. The u-boot script is usually packaged in the device specific package.

With u-boot, we can have two separate postmarketOS installations on the device, one on the internal storage (eMMC), and one on the SD card. If that is the case, we set the <code>pmos_root</code> and <code>pmos_boot</code> Linux kernel parameters from u-boot, so our initramfs script knows which root and boot partition we want to use ([https://gitlab.com/postmarketOS/pmaports/-/blob/1d2b62a1094e77e50e1a52c48b07eecb1fbfd26a/device/community/device-pine64-pinephone/uboot-script.cmd#L4-12 example]).

== postmarketOS initramfs ==
The postmarketOS initramfs consists of busybox, a shell script and very few other command-line programs. Find the source code in the [https://gitlab.com/postmarketOS/pmaports/-/tree/master/main/postmarketos-mkinitfs postmarketos-mkinitfs] pmaports. <code>mkinitfs.sh</code> generates the initramfs (and packages into a suitable format for the device specific bootloader if necessary, such as a boot.img file) and <code>init.sh.in</code> is what is actually running in the initramfs.

The initramfs takes care of many things during the early booting phase, such as setting up USB networking, resizing the root partition, displaying a charging UI. Some of the tasks are listed in detail here, for others refer to the source code for now and consider expanding this article. Furthermore, the initramfs supports hooks (which may be used to work around device specific quirks, for example).

=== Find the boot and root partitions ===
Due to the various possible [[Partition_Layout|partition layouts]], the initramfs script has to look in various places for the postmarketOS boot and root partitions.

boot partition:
* <code>pmos_boot</code> kernel parameter (from the device specific bootloader)
* Any partition or subpartition with the <code>pmOS_boot</code> label

root partition:
* <code>pmos_root</code> kernel parameter (from the device specific bootloader)
* Any partition or subpartition with the <code>pmOS_root</code> label
* Any partition or subpartition that is encrypted

=== Load initramfs-extra ===
Some Android devices require a very small initramfs, because otherwise the resulting <code>boot.img</code> file is too big for the Android boot partition. Therefore, we have split the initramfs into two parts, the tiny initramfs that is potentially placed in such a <code>boot.img</code> file (depending on the bootloader). And the initramfs-extra, which can hold bigger binaries, such as the UI to unlock an encrypted root partition ([[osk-sdl]]).

=== Switch root ===
{{note|It will look like this, once {{issue|664|pmaports}} is resolved.}}
At the end of the initramfs script, the root partition is mounted at <code>/sysroot</code>, and the boot partition is mounted at <code>/sysroot/boot</code>. The latter is done, so OpenRC does not need to figure out the correct boot partition later on. Afterwards, the busybox command <code>switch_root</code> is called to switch over and pass control to OpenRC.

== See also ==
* [[Partition Layout]]
* [[Troubleshooting:boot]]
* [[Troubleshooting:boot:initfshooks]]
* {{issue|664|pmaports}}: two postmarketOS installations: OpenRC may mount wrong partition as /boot
* [https://postmarketos.org/blog/2018/04/14/lowlevel/ postmarketOS low-level blog post] (talks in part about liberating bootloaders)
* [[deviceinfo_flash_methods|Deviceinfo: flash methods]]

[[Category:Technical Reference]]
