[[Category:Supported Devices]]
[[Category:Devices]]
{{Infobox device
| manufacturer = Samsung
| name = Galaxy S II
| codename = i9100
| image = File:Samsung-i9100-weston.jpg
| imagecaption = First photo ever released of postmarketOS (from the original [https://ollieparanoid.github.io/post/postmarketOS/ introduction post]).
| releaseyear = 2011
| originalsoftware = Android 2.3.4
| cpu = Dual-core 1.2 GHz Cortex-A9
| gpu = Mali-400MP4
| storage = 16/32 GB
| display = 480x800 AMOLED
| memory = 1 GB RAM
}}
=== Contributors ===

* ollieparanoid

=== What works ===

* Installation to sdcard (<code>pmbootstrap install --sdcard=/dev/mmcblk...</code>)
* Touchscreen
* Weston
* XWayland

=== What does not work ===

* The rest (Wifi, bluetooth, making calls, ...)
* Installation to the device memory (<code>pmbootstrap flasher flash_system</code>, see [https://github.com/postmarketOS/pmbootstrap/issues/422 #422])

=== How to enter flash mode ===

* Connect an USB cable
* Make sure, the device is powered off
* Hold power + volume down
* As soon, as the samsung logo appears on the screen, only press volume down

=== Boot process ===

Unlike most other Android devices, the i9100 can not boot a <code>boot.img</code> (which consists of <code>kernel</code> + <code>initramfs</code>). Instead, the <code>boot.img</code> file is just a regular kernel. Here's an example from a LineageOS <code>boot.img</code> for the i9100 (for &quot;real&quot; boot.img files, <code>file</code> says something like <code>boot.img: Android bootimg, kernel, ramdisk, page size: 2048</code> ):

<pre>/tmp/test # file boot.img
boot.img: Linux kernel ARM boot executable zImage (little-endian)</pre>
However, it is possible to directly integrate a <code>initramfs</code> into the kernel at kernel compile time (this is totally different from the boot.img approach, if this is unclear to you, please ask in the channel), and this is what the Android ROMs do on the i9100. While it is not a big deal in the Android compilation process, it is a problem for postmarketOS, because we want to be able to build the <code>initramfs</code> independently from the kernel.

The following workaround is currently implemented:

* We flash the ''real'' initramfs to the recovery partition ([https://github.com/postmarketOS/pmbootstrap/blob/master/aports/heimdall/heimdall_flash_kernel.sh source])
* The initramfs [https://github.com/postmarketOS/pmbootstrap/blob/master/aports/linux-samsung-i9100/init init script built into the kernel] checks if the recovery partition contains a compressed initramfs, and if it does, it extracts it and passes execution to the real initramfs' init script.
* This idea is based on something called [https://forum.xda-developers.com/galaxy-s2/orig-development/isorec-isolated-recovery-galaxy-s2-t3291176 &quot;isorec&quot;].

While this works for the i9100, this approach needs to be improved to also work on other Samsung devices, that need to be flashed with heimdall, like the i9070 (see [https://github.com/postmarketOS/pmbootstrap/issues/22 #22]).

=== Links ===

* [https://github.com/postmarketOS/pmbootstrap/tree/master/aports/device-samsung-i9100 Device package]

=== Photos ===

* [https://ollieparanoid.github.io/img/2017-05-26/i9100/telnet.jpg Initramfs asking for the password via telnet]
* [https://ollieparanoid.github.io/img/2017-05-26/i9100/filled.jpg Weston with various programs opened]
* [https://ollieparanoid.github.io/img/2017-05-26/i9100/demos.jpg postmarketOS demo menu (XWayland)]
* [https://ollieparanoid.github.io/img/2017-05-26/i9100/firefox.jpg Firefox (XWayland)]
* [https://ollieparanoid.github.io/img/2017-05-26/i9100/smoke.jpg Weston-smoke demo]

=== Wifi ===

''Please edit this to match the style of wiki.''

I got wifi working on gt-i9100 with following procedure:

- Created path /system/etc/wifi

mkdir -p /system/etc/wifi

- Downloaded firmware files from https://github.com/TheMuppets/proprietary_vendor_samsung/tree/cm-14.1/i9100/proprietary/system/etc/wifi and saved to /system/etc/wifi

- Rebooted phone

reboot

- Created conf for wpa_supplicant

$ wpa_passphrase "SSID" "password" > wifi

- connect to wifi AP

$ sudo wpa_supplicant -i wlan0 -c wifi

- get ip address from dhcp server

$ sudo udhcpc -i wlan0

I have no idea how to package this for pmOS and if it is even possible because of the binary blobs.
