{{Infobox device
| manufacturer = Samsung
| name = Galaxy S II
| codename = i9100, d710
| image = File:Samsung-i9100-weston.jpg
| imagecaption = First photo ever released of postmarketOS (from the original [https://ollieparanoid.github.io/post/postmarketOS/ introduction post]).
| releaseyear = 2011
| originalsoftware = Android 2.3.4
| chipset = Exynos 4210 Dual
| cpu = Dual-core 1.2 GHz Cortex-A9
| gpu = Mali-400MP4
| storage = 16/32 GB
| display = 480x800 AMOLED
| memory = 1 GB
}}
[[Image:I9100-xfce.jpeg|thumb|right|Running XFCE]]
=== Contributors ===

* ollieparanoid
* veggie

=== What works ===

* Installation to sdcard (<code>pmbootstrap install --sdcard=/dev/mmcblk...</code>)
* Installation to device memory (partial)
* Touchscreen
* Weston (only on SD card)
* XWayland
* Wifi
* Display brightness control
* Accerelometer sensor
* rtc
* Xfce

=== What does not work ===
{{note|This device is [https://redmine.replicant.us/projects/replicant/wiki/GalaxyS2I9100 supported by Replicant]. With some more research we should be able to get most stuff running with their free software userland drivers.}}
* Audio (requires an userspace driver, we can probably use [https://code.paulk.fr/article9/galaxy-s2-replicant-port-status-update this free software implementation])
* The rest (bluetooth, making calls, ...)
* Auto resizing partitions during installation to device memory (probably)

=== How to enter flash mode ===

* Connect a USB cable
* Make sure, the device is powered off
* Hold power + Home + volume down
* When prompted, release all buttons and press volume up

=== Installation ===
{{note|If you get a "no space left on device" error, see {{github|928}}.}}
The normal installation does not work yet ({{github|581}}, we might fix that in the future with our own flashing method which basically automatizes the netcat method). Right now you have the following options. If you use any of these, please expand the wiki with details.
* use <code>pmbootstrap install --sdcard</code> (you will need a real sd card, but this is the easiest method)
* use the netcat method (see below)
* use the recovery zip installer (you need to install a recovery like TWRP on your device, then run <code>pmbootstrap install --android-recovery-zip</code> and <code>pmbootstrap flasher --method=adb sideload</code>.)

==== netcat method ====
Flashing to device memory should be possible using [https://github.com/postmarketOS/pmbootstrap/issues/456 drebrez's netcat method (#456)].

Init pmbootstrap. Make sure to choose ''none'' for the user interface instead of ''weston'' because ''weston'' makes the image just a little bit too large for the unresized partition.

<source lang="shell">$ ./pmbootstrap.py init</source>

Start the build process

<source lang="shell">$ ./pmbootstrap.py install</source>

Flash postmarketOS to the device:

https://github.com/postmarketOS/pmbootstrap/issues/456

For the d710, on step 5 use ''/dev/mmcblk0p11'' as the install partition.

On step 8, use <source lang="shell">pv /home/pmos/rootfs/samsung-i9100.img | nc 172.16.42.1 60000</source> instead.

===== Step by step guide for Flashing to device memory =====

''Please do not hesitate to remove or edit if this does not belong here or match intended wiki content. This does not bring anything new just summary.''

- Build image (on your computer)

-- Install pmboostrap

  $ git clone https://github.com/postmarketOS/pmbootstrap.git

-- Change working directory to the pmboostrap

  $ cd pmbootstrap/

-- Configure

  $ ./pmbootstrap.py init
  [18:27:09] Device [samsung-i9100]: samsung-i9100
  [18:27:45] User interface [weston]: weston
  [18:28:05] Work path [/home/<USER>/.local/var/pmbootstrap]:
  [18:28:29] Jobs [5]:
  [18:28:46] Timestamp based rebuilds (y/n) [y]:
  [18:29:05] Extra packages [none]:

-- Prepare the installation

  $ ./pmbootstrap.py install

- Flash to phone memory - This will replace (break) your current phone system!
The description is using the alternative flash method because there it did not work for me with heimdall - https://github.com/Benjamin-Dobell/Heimdall/issues/418

-- Set phone to ODIN mode

  1. Turn off phone
  2. Connect USB cable
  3. Hold VOLUME_DOWN + HOME + POWER until you get Warning!! screen
  4. Push VOLUME_UP to continue to ODIN mode screen

-- Set image for NETCAT flash method

  $ ./pmbootstrap.py initfs hook_add debug-shell

-- Flash Kernel and Recovery (phone will reboot to screen "boot partition not found")

  $ ./pmbootstrap.py flasher flash_kernel

-- Check USB network connection to phone

  ping 172.16.42.1

(if it does not ping, try replugging usb cable few times)

-- Connect to phone with telnet

  $ telnet 172.16.42.1

-- Start netcat to listen for image (on the phone)
''/dev/mmcblk0p9 should be FACTORYFS partition you check by running fdisk -l /dev/mmcblk0''

  / # nc -v -l -p 60000 > /dev/mmcblk0p9

-- Switch to pmboostrap chroot (on the computer in other terminal)

  $ ./pmbootstrap.py chroot --suffix native

-- Install pv (in the chroot)

  / # apk add pv

-- Send image from computer to netcat (on the computer)

  / # pv /home/pmos/rootfs/samsung-i9100.img | nc 172.16.42.1 60000

-- Close both nc with CTRL+C when transfer finishes and reboot the phone with power button

=== Boot process ===

We're using the <code>heimdall-isorec</code> flash method, see [[deviceinfo_flash_methods]] for more information.

=== Links ===

* [https://github.com/postmarketOS/pmbootstrap/tree/master/aports/device/device-samsung-i9100 Device package]
* [https://github.com/postmarketOS/pmbootstrap/issues/456 netcat installation method]

=== Photos ===

* [https://ollieparanoid.github.io/img/2017-05-26/i9100/telnet.jpg Initramfs asking for the password via telnet]
* [https://ollieparanoid.github.io/img/2017-05-26/i9100/filled.jpg Weston with various programs opened]
* [https://ollieparanoid.github.io/img/2017-05-26/i9100/demos.jpg postmarketOS demo menu (XWayland)]
* [https://ollieparanoid.github.io/img/2017-05-26/i9100/firefox.jpg Firefox (XWayland)]
* [https://ollieparanoid.github.io/img/2017-05-26/i9100/smoke.jpg Weston-smoke demo]
* [https://wiki.postmarketos.org/wiki/File:Samsung-d710.jpg Weston-smoke demo running on a d710]
* [https://wiki.postmarketos.org/images/3/36/I9100-xfce.jpeg xfce-ui running on i9100]

=== Wifi ===

- Create conf for wpa_supplicant

  $ wpa_passphrase "SSID" "password" > wifi

Note : If you are connecting to a hidden wireless network, make sure to add line "scan_ssid=1" after the ssid line in your generated conf file

- Connect to wifi AP

  $ sudo wpa_supplicant -i wlan0 -c wifi &

- Get ip address from dhcp server (in another terminal)

  $ sudo udhcpc -i wlan0

To set wifi connection to start automatically on boot, please refer here [[wifi]]

=== ofono ===

Best way seems to get Samsung IPC modem support from the patchset https://lists.ofono.org/pipermail/ofono/2012-September/013766.html (but it was not accepted) and does not build https://github.com/tssk/pmbootstrap/commits/device-samsung-i9100_modem . I would appreciate help from someone that understands C.

Second idea was to build Andoird RIL + Samsung RIL and get ofono working with ofono-ril support - https://redmine.replicant.us/projects/replicant/wiki/Samsung-RIL .

=== GPS ===

https://univers-libre.net/posts/galaxy-s2-gps-on-replicant.html

https://redmine.replicant.us/projects/replicant/wiki/GSD4t

https://github.com/mnalis/gsd4t_parser

https://redmine.replicant.us/boards/21/topics/897

=== Setting the hardware clock ===

If you have already setup chrony and if your hardware clock doesn't have the time set you can set it with,
<source lang="shell">
localhost:~# hwclock -w  # Write the current system time to the hardware clock</source>

=== Setting the display brightness ===

To adjust display brightness write a value between 0-255 to file given below,
<source lang="shell">
localhost:~# echo 0 > /sys/class/backlight/panel/brightness #set the display to its lowest brightness

localhost:~# echo 255 > /sys/class/backlight/panel/brightness #set the display to maximum brightness

</source>

=== Reading Accelerometer sensor ===

Accelerometer sensor data can read from following file
<source lang="shell">
localhost:~$ cat /sys/class/accelerometer/accelerometer/acc_file 
</source>

== Hardware specifications for i9100 ==

=== SoC ===

Samsung Exynos 4 Dual 45 nm (GT-I9100, SHW-M250S/K/L) [https://en.wikipedia.org/wiki/Samsung_Galaxy_S_II source]

=== CPU ===

1.2 GHz dual-core ARM Cortex-A9 (GT-I9100, GT-I9105, GT-I9100G, SHW-M250S/K/L) [https://en.wikipedia.org/wiki/Samsung_Galaxy_S_II source]

=== GPU ===

ARM Mali-400 MP4 (GT-I9100, SHW-M250S/K/L) [https://en.wikipedia.org/wiki/Samsung_Galaxy_S_II source]

=== WiFi / Bluetooth / FM radio ===

Broadcom BCM4330 (SWB-B42) Bluetooth 4.0 Dual Band WLAN FM [https://gsmserver.com/item/ic-and-processors/wi-fi-ic-bcm4330-swb-b42-for-samsung-i9100-galaxy-s2-cell-phone-for-bluetooth-for-fm-radio-4709-002054/ source] [https://www.techinsights.com/reports-and-subscriptions/open-market-reports/Report-Profile/?ReportKey=7587 source]

Driver? - https://wireless.wiki.kernel.org/en/users/drivers/brcm80211

Firmware? - https://packages.debian.org/sid/kernel/firmware-brcm80211

=== Memory ===

1 GB RAM [https://en.wikipedia.org/wiki/Samsung_Galaxy_S_II source]

=== Storage ===

16 GB or 32 GB flash memory [https://en.wikipedia.org/wiki/Samsung_Galaxy_S_II source]

=== Removable storage ===

microSD (up to 128 GB SDXC) [https://en.wikipedia.org/wiki/Samsung_Galaxy_S_II source]

=== TODO ===

gps, sensors, camera...

=== See also ===
* [https://code.paulk.fr/article9/galaxy-s2-replicant-port-status-update Galaxy S2 Replicant port status update]
* [https://redmine.replicant.us/projects/replicant/wiki/GalaxyS2I9100 Replicant wiki device page]
