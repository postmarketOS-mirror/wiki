{{Infobox device
| manufacturer = Samsung
| name = Galaxy S II
| codename = samsung-i9100, d710
| image = File:Samsung-i9100-weston.jpg
| imagecaption = First photo ever released of postmarketOS (from the original [https://ollieparanoid.github.io/post/postmarketOS/ introduction post]).
| releaseyear = 2011
| originalsoftware = Android 2.3.4
| chipset = Exynos 4210 Dual
| cpu = Dual-core 1.2 GHz Cortex-A9
| gpu = Mali-400MP4
| storage = 16/32 GB
| display = 480x800 AMOLED
| memory = 1 GB
| architecture = armhf
| status_usbnet = Y
| status_flashing = 
| status_touch = Y
| status_screen = Y
| status_wifi = Y
| status_xwayland = Y
| status_fde = P
| status_mainline = P
| status_battery = 
| status_3d = 
| status_accel = Y
| status_audio = 
| status_bluetooth =
| status_camera =
| status_gps = 
| status_mobiledata = 
| status_sms = 
| status_calls = 
| booting = yes
| whet_dhry = 542.5
}}
[[Image:S2_pmos_xfce.jpg|thumb|right|Running XFCE]]

=== Contributors ===
* ollieparanoid
* veggie

=== What works ===
* Installation to sdcard (<code>pmbootstrap install --sdcard=/dev/mmcblk...</code>)
* Installation to device memory (partial)
* Touchscreen
* Weston (only on SD card)
* XWayland
* Wifi
* Display brightness control
* Accerelometer sensor
* rtc
* Xfce

=== What does not work ===
* Audio, bluetooth, modem, ...
* MHL (Video-out)
* See "Hardware specifications" for ideas how to get them working.
* Auto resizing partitions during installation to device memory (probably)



=== Installation ===
==== How to enter flash mode ====
* Connect a USB cable
* Make sure, the device is powered off
* Hold power + Home + volume down
* When prompted, release all buttons and press volume up

==== Step by step guide for Flashing via netcat [https://gitlab.com/postmarketOS/pmbootstrap/issues/456 (#456)] ====

{{note|If you get a "no space left on device" error, see {{github|928}}.}}
The normal installation does not work yet ({{github|581}}, we might fix that in the future with our own flashing method which basically automatizes the netcat method). Right now you have the following options. If you use any of these, please expand the wiki with details.
* use <code>pmbootstrap install --sdcard</code> (you will need a real sd card, but this is the easiest method)
* use the netcat method (see below)
* use the recovery zip installer (you need to install a recovery like TWRP on your device, then run <code>pmbootstrap install --android-recovery-zip</code> and <code>pmbootstrap flasher --method=adb sideload</code>.)

- Build image (on your computer)

-- Install pmboostrap

  $ git clone https://gitlab.com/postmarketOS/pmbootstrap.git

-- Change working directory to the pmboostrap

  $ cd pmbootstrap/

-- Configure

  $ ./pmbootstrap.py init
  [18:27:09] Device [samsung-i9100]: samsung-i9100
  [18:27:45] User interface [weston]: weston
  [18:28:05] Work path [/home/<USER>/.local/var/pmbootstrap]:
  [18:28:29] Jobs [5]:
  [18:28:46] Timestamp based rebuilds (y/n) [y]:
  [18:29:05] Extra packages [none]:

-- Prepare the installation

  $ ./pmbootstrap.py install

- Flash to phone memory - This will replace (break) your current phone system! This uses the alternative flash method because it currently doesn't seem to work with heimdall - https://gitlab.com/BenjaminDobell/Heimdall/issues/418

-- Set phone to ODIN mode

  1. Turn off phone
  2. Connect USB cable
  3. Hold VOLUME_DOWN + HOME + POWER until you get Warning!! screen
  4. Push VOLUME_UP to continue to ODIN mode screen

-- Setup image for NETCAT flash method

  $ ./pmbootstrap.py initfs hook_add debug-shell

-- Flash Kernel and Recovery (phone will reboot to screen "boot partition not found")

  $ ./pmbootstrap.py flasher flash_kernel

-- Check USB network connection to phone

  ping 172.16.42.1

(if it does not ping, try replugging usb cable few times)

-- Connect to phone with telnet

  $ telnet 172.16.42.1

-- Start netcat to listen for image (on the phone)
''/dev/mmcblk0p9 should be FACTORYFS partition. Check by running fdisk -l /dev/mmcblk0''

  / # nc -v -l -p 60000 > /dev/mmcblk0p9

-- Switch to pmboostrap chroot (on the computer in another terminal)

  $ ./pmbootstrap.py chroot --suffix native

-- Install pv in the chroot

  / # apk add pv

-- Send image from computer to netcat (via the chroot)

  / # pv /home/pmos/rootfs/samsung-i9100.img | nc 172.16.42.1 60000

-- Close both nc with CTRL+C when transfer finishes and reboot the phone with power button

==== Boot process ====

We're using the <code>heimdall-isorec</code> flash method, see [[deviceinfo_flash_methods]] for more information.

==== Mainline kernel ====
The user [https://github.com/Sekilsgs2 Sekilsgs2] on Github created a [https://github.com/Sekilsgs2/i9100_kernel_mainline_port.git mainline kernel port], based on the older kernel version 4.2. Using ArchLinux, I was still able to compile and flash the kernel using following commands:

  $ git clone https://github.com/Sekilsgs2/i9100_kernel_mainline_port.git
  $ cd i9100_kernel_mainline_port
  $ export ARCH=arm
  $ export CROSS_COMPILE=arm-none-eabi-
  $ make i9100_defconfig
  $ make -j6
  $ cat arch/arm/boot/zImage arch/arm/boot/dts/exynos4210-i9100.dtb > zimage
  $ mkimage -A arm -O linux -T kernel -C none -a 0x40008000 -e 0x40008000 -n Linux-android-sucks -d zimage boot.img
  $ make modules_install INSTALL_MOD_PATH=../
  $ heimdall flash --RECOVERY boot.img

It is also possible to use a more recent mainline kernel version. Therefore we will have to checkout the latest sources and download the device tree file:

  $ git clone git://git.kernel.org/pub/scm/linux/kernel/git/stable/linux-stable.git
  $ cd linux-stable
  $ git checkout tags/5.4.5
  $ wget "https://raw.githubusercontent.com/Sekilsgs2/i9100_kernel_mainline_port/6c02dad36b8a76a6f50d26ff1b9abb0d30aacbc9/arch/arm/configs/i9100_defconfig" -O arch/arm/configs/i9100_defconfig
  $ wget "https://raw.githubusercontent.com/Sekilsgs2/i9100_kernel_mainline_port/master/arch/arm/boot/dts/exynos4210-i9100.dts" -O arch/arm/boot/dts/exynos4210-i9100.dts
  $ wget "https://raw.githubusercontent.com/Sekilsgs2/i9100_kernel_mainline_port/master/arch/arm/boot/dts/exynos4210.dtsi" -O arch/arm/boot/dts/exynos4210.dtsi
  # patch file arch/arm/boot/dts/Makefile
  $ export ARCH=arm
  $ export CROSS_COMPILE=arm-none-eabi-
  $ make i9100_defconfig
  $ make -j6
  $ make dtbs
  $ cat arch/arm/boot/zImage arch/arm/boot/dts/exynos4210-i9100.dtb > zimage
  $ mkimage -A arm -O linux -T kernel -C none -a 0x40008000 -e 0x40008000 -n Linux-android-sucks -d zimage boot.img
make modules_install INSTALL_MOD_PATH=../
  $ heimdall flash --kernel u-boot.bin

Unfortunately some things doesn't work here any more. Using a keyboard with USB-OTG fails and also the screen output is up-side-down. I haven't yet found the fixes made to the custom 4.2 port which I have to reapply :(

===== Firmware files =====
Proprietary firmware files are needed to get Wifi and Bluetooth working with the mainline kernel. In the following commands, I download them to the ArchLinuxARM root filesystem before booting the device. This should also work for postmarketOS:

  $ wget "https://raw.githubusercontent.com/TheMuppets/proprietary_vendor_samsung/cm-14.1/i9100/proprietary/system/etc/wifi/nvram_net.txt" -O /usr/lib/firmware/brcm/brcmfmac4330-sdio.samsung,i9100.txt
  $ wget "https://github.com/TheMuppets/proprietary_vendor_samsung/raw/lineage-17.0/i9100/proprietary/system/etc/wifi/bcmdhd_sta.bin" -O /usr/lib/firmware/brcm/brcmfmac4330-sdio.bin # for wifi
  $ wget "https://github.com/respeaker/rkbin/raw/master/firmware/bluetooth/BCM4330B1.hcd" -O /usr/lib/firmware/brcm/BCM4330B1.hcd # for bluetooth

==== U-Boot bootloader (legacy) ====
The user [https://github.com/Sekilsgs2 Sekilsgs2] on Github created a [https://github.com/Sekilsgs2/i9100-uboot.git u-boot bootloader port], based on the work done by the user [https://github.com/astarasikov astarasikov] at [https://github.com/astarasikov/i9100-uboot this repository]. On Archlinux I was able to compile the older U-Boot version using following commands:

  $ pacman -U dtc-1.4.1-1-x86_64.pkg.tar.xz # downgrade to older version
  $ pacman -S gcc-arm-none-eabi-bin-49 # older gcc version
  $ git clone https://github.com/Sekilsgs2/i9100-uboot.git
  $ cd i9100-uboot
  $ export PATH="/usr/local/arm/gcc-arm-none-eabi-4_9-2015q3/bin:$PATH"
  $ export ARCH=arm
  $ export CROSS_COMPILE=arm-none-eabi-
  $ make galaxys2_config
  $ make galaxys2
  $ heimdall flash --KERNEL u-boot.bin

After that, u-boot is booting, showing a nice bootloader menu which can be controlled by using the arrow keys.
=== Usage ===
==== Wifi ====

- Create conf for wpa_supplicant

  $ wpa_passphrase "SSID" "password" > wifi

Note : If you are connecting to a hidden wireless network, make sure to add line "scan_ssid=1" after the ssid line in your generated conf file

- Connect to wifi AP

  $ sudo wpa_supplicant -i wlan0 -c wifi &

- Get ip address from dhcp server (in another terminal)

  $ sudo udhcpc -i wlan0

To set wifi connection to start automatically on boot, please refer here [[wifi]]

==== Modem ====

Using Ofono: Best way seems to get Samsung IPC modem support from the patchset https://lists.ofono.org/pipermail/ofono/2012-September/013766.html (but it was not accepted) and does not build https://github.com/tssk/pmbootstrap/commits/device-samsung-i9100_modem . I would appreciate help from someone that understands C.

Second idea was to build Andoird RIL + Samsung RIL and get ofono working with ofono-ril support - https://redmine.replicant.us/projects/replicant/wiki/Samsung-RIL .

==== GPS ====

https://univers-libre.net/posts/galaxy-s2-gps-on-replicant.html

https://redmine.replicant.us/projects/replicant/wiki/GSD4t

https://github.com/mnalis/gsd4t_parser

https://redmine.replicant.us/boards/21/topics/897

==== Setting the hardware clock ====

If you have already setup chrony and if your hardware clock doesn't have the time set you can set it with,
<source lang="shell">
localhost:~# hwclock -w  # Write the current system time to the hardware clock</source>

==== Setting the display brightness ====

To adjust display brightness write a value between 0-255 to file given below,
<source lang="shell">
localhost:~# echo 0 > /sys/class/backlight/panel/brightness #set the display to its lowest brightness

localhost:~# echo 255 > /sys/class/backlight/panel/brightness #set the display to maximum brightness

</source>

==== Reading Accelerometer sensor ====

Accelerometer sensor data can read from following file
<source lang="shell">
localhost:~$ cat /sys/class/accelerometer/accelerometer/acc_file 
</source>

=== Hardware specifications ===
{{note|This device is [https://redmine.replicant.us/projects/replicant/wiki/GalaxyS2I9100 supported by Replicant]. With some more research we should be able to get most stuff running with their free software userland drivers.}}

==== SoC ====
Samsung Exynos 4 Dual 45 nm (GT-I9100, SHW-M250S/K/L) [https://en.wikipedia.org/wiki/Samsung_Galaxy_S_II source]

==== CPU ====
1.2 GHz dual-core ARM Cortex-A9 (GT-I9100, GT-I9105, GT-I9100G, SHW-M250S/K/L) [https://en.wikipedia.org/wiki/Samsung_Galaxy_S_II source]

==== GPU ====
ARM Mali-400 MP4 (GT-I9100, SHW-M250S/K/L) [https://en.wikipedia.org/wiki/Samsung_Galaxy_S_II source]

==== WiFi / Bluetooth / FM radio ====
Broadcom BCM4330 (SWB-B42) Bluetooth 4.0 Dual Band WLAN FM [https://gsmserver.com/item/ic-and-processors/wi-fi-ic-bcm4330-swb-b42-for-samsung-i9100-galaxy-s2-cell-phone-for-bluetooth-for-fm-radio-4709-002054/ source] [https://www.techinsights.com/reports-and-subscriptions/open-market-reports/Report-Profile/?ReportKey=7587 source]

Driver? - https://wireless.wiki.kernel.org/en/users/drivers/brcm80211

Firmware - https://android.googlesource.com/platform/hardware/broadcom/wlan/+/master/bcmdhd/firmware/bcm4330/

==== Memory ====
1 GB RAM [https://en.wikipedia.org/wiki/Samsung_Galaxy_S_II]

==== Storage ====
16 GB or 32 GB flash memory [https://en.wikipedia.org/wiki/Samsung_Galaxy_S_II]

==== Removable storage ====
microSD (up to 128 GB SDXC) [https://en.wikipedia.org/wiki/Samsung_Galaxy_S_II]

==== Modem ====
* XMM6260 [https://code.paulk.fr/article9/galaxy-s2-replicant-port-status-update]
* aka "X-GOLD 626", and it's also used in Nexus 7 [https://ruedigergad.com/2013/01/09/wanted-nexus-7-3g-linux-driver/]
* it seems to be supported by the mainline kernel (big questionmark here) [http://www.omappedia.org/wiki/Infineon_Modems]

==== Audio ====
* Yamaha MC1N2
* The Android kernel exposes the alsa API.
* But when you play with the volume sliders in alsamixer, nothing happens
* /dev/snd/hwC0D0 implements hardware-specific controls (via ioctl) [https://code.paulk.fr/article9/galaxy-s2-replicant-port-status-update] (check the link for a free software Android userspace driver)
* We could write a daemon, that watches the alsa sound levels, and unmutes channels (speaker, headphones etc.) via hwC0D0 as necessary. (This will only work with the downstream kernel, the sound is probably not implemented in the upstream kernel at all?)
* Maybe all this is overkill and the strategy from [[Audio]] works as well.

==== MHL ====
* Fairchild FSA3200UMX switch [https://forum.xda-developers.com/showthread.php?t=1316501&page=2#post25615680]
* Maxim MAX8997 PMIC [https://forum.xda-developers.com/showthread.php?t=1316501&page=2#post25615680]
* Silicon Image 9244 transmitter [https://forum.xda-developers.com/showthread.php?t=1316501&page=2#post25615680]
* [https://forum.xda-developers.com/showpost.php?p=74099043&postcount=4 Should be all supported] to a certain extent in mainline 4.15 kernel <small><small>(of course the device is still stuck to 3.0 for the time being)</small></small>

=== Photos ===
* [https://ollieparanoid.github.io/img/2017-05-26/i9100/telnet.jpg Initramfs asking for the password via telnet]
* [https://ollieparanoid.github.io/img/2017-05-26/i9100/filled.jpg Weston with various programs opened]
* [https://ollieparanoid.github.io/img/2017-05-26/i9100/demos.jpg postmarketOS demo menu (XWayland)]
* [https://ollieparanoid.github.io/img/2017-05-26/i9100/firefox.jpg Firefox (XWayland)]
* [https://ollieparanoid.github.io/img/2017-05-26/i9100/smoke.jpg Weston-smoke demo]
* [https://wiki.postmarketos.org/wiki/File:Samsung-d710.jpg Weston-smoke demo running on a d710]
* [https://wiki.postmarketos.org/images/3/36/I9100-xfce.jpeg xfce-ui running on i9100]

=== See also ===
* [https://code.paulk.fr/article9/galaxy-s2-replicant-port-status-update Galaxy S2 Replicant port status update]
* [https://redmine.replicant.us/projects/replicant/wiki/GalaxyS2I9100 Replicant wiki device page]
* [https://github.com/postmarketOS/pmbootstrap/tree/master/aports/device/device-samsung-i9100 Device package]
* [https://github.com/postmarketOS/pmbootstrap/issues/456 netcat installation method]
