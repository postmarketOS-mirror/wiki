{{Infobox device
| manufacturer = Nokia
| name = N900
| codename = rx-51
| image = File:Nokia-rx51-cmus.jpg
| imagecaption = Nokia N900 running cmus
| releaseyear = 2009
| originalsoftware = Maemo on Linux 2.6
| pmoskernel = Mainline Linux
| chipset = TI OMAP 3430
| cpu = 600 MHz Cortex-A8
| gpu = PowerVR SGX530
| storage = 32 GB
| display = 800x480 TFT resistive
| memory = 256 MB
}}
[[File:I3wm-n900.jpg|thumb|right|Running i3wm]]
[[File:20170724 0002.jpg|thumb|right|Splash screen]]

=== Contributors ===
* ''[[user:MartijnBraam|MartijnBraam]]''
* ''[https://github.com/craftyguy craftyguy]''
* ''[https://github.com/pavelmachek Pavel Machek]''
* ''[[user:drebrez|drebrez]]''
* ''[https://github.com/fxkrait FXKrait]''

=== What works ===
* Framebuffer & DRM graphics
* GPRS / SMS (see section below)
* Unlocking the root partition using the physical keyboard
* Display Backlight control
* Wayland on framebuffer
* Wifi (see Additional Info below)
* Notification led
* Audio playback (ALSA)
* Keyboard backlight (see Additional Info below)
* Battery capacity reporting (see Additional Info below)
* Keyboard in virtual terminal
* USB Mass Storage (see USB Gadget below)

=== What does not work ===
* Front cameras
* Back camera is close to supported in 4.14-rc1.
* Voice calls (needs https://gitlab.com/libcmtspeechdata/libcmtspeechdata and has poor quality)
* 3D Acceleration (requires binary blob)
* There's bluetooth support at bluetooth-next, but that works on N950, not on N900. [https://git.kernel.org/pub/scm/linux/kernel/git/bluetooth/bluetooth-next.git/commit/?id=7bb318680e868cd049922f6761170b42ff89687d Bluetooth] . There's a driver ported to 4.13 at bt-v4.13 tree, git.kernel.org, linux-n900 .

=== Installation ===

We currently only support installing and running pmos from the microsd card on the n900.<br />
Getting it to work with emmc and 0xffff is harder to implement and has no real benefit since<br />
the built in emmc is quite slow and fragile.

# Init pmbootstrap <source lang="shell">$ ./pmbootstrap.py init</source> Choose 'nokia-n900' as target device.
# Start the build process and install the completed image to a sdcard<source lang="shell">
# Replace /dev/sdX with the device for your sdcard
$ ./pmbootstrap.py install --sdcard /dev/sdX</source>
# [http://maemo.org/downloads/product/Maemo5/u-boot-flasher/ Install u-boot from pali] on the n900 in Maemo [https://gitlab.com/postmarketOS/pmbootstrap/issues/1371#note_85245259 from the terminal], if you haven't installed it already. See Additional Info below for instructions on configuring pmos to boot by default.
# Place the sdcard into the n900 and boot it with the keyboard slide open
# Choose the u-boot shell
# enter <code>run sdboot</code> into the shell

=== Features ===

==== Configuring U-boot (optional) ====

In order to configure pmos to boot by default on the N900, using U-boot, you will need to boot into Maemo and create a <code>/etc/bootmenu.d/10-pmos.item</code> file as the root user with these contents:

{{hc|/etc/bootmenu.d/10-pmos.item|<syntaxhighlight lang="ini">
ITEM_NAME="postmarketOS"
ITEM_SCRIPT="boot.scr"
ITEM_DEVICE="${EXT_CARD}p1"
ITEM_FSTYPE="ext2"
</syntaxhighlight>}}
It can be set to the default boot option by creating a symlink:

<pre>root@Nokia-N900:~# ln -s /etc/bootmenu.d/10-pmos.item /etc/default/bootmenu.item</pre>
Finally, run <code>u-boot-update-bootmenu</code>:

<pre>root@Nokia-N900:~# u-boot-update-bootmenu 
Default bootmenu entry is '/etc/bootmenu.d/10-pmos.item'
Adding bootmenu entry for: 'Maemo 5 with attached kernel (Internal Nand)'

Configuration file: /etc/bootmenu.d/10-pmos.item
Adding bootmenu entry for: 'postmarketOS'
Configuring this bootmenu entry as default

Generating u-boot bootmenu script...
</pre>
'''Note''': This will set pmos as the default boot option. Maemo will still be accessible when booting the N900 with the keyboard slide out and selecting the relevant boot option in the u-boot boot menu.

==== Wifi ====

The <code>linux-firmware-ti-connectivity</code> package is required to provide the wl1251 firmware necessary for initializing the wifi device. ([https://github.com/postmarketOS/pmbootstrap/pull/1414 #1414])

Once the device has been successfully initialized, enable it:

<pre>$ sudo ip link set wlan0 up
$ sudo iw wlan0 set type managed</pre>
Configure wpa_supplicant (only necessary on encrypted networks):

<pre>$ sudo su -
# wpa_passphrase $YOUR_SSID &gt; /etc/wpa_supplicant/wpa_supplicant.conf
&lt;enter passphrase here and press Enter&gt;
# exit</pre>
Connect to network using wpa_supplicant:

<pre>$ sudo rc-service wpa_supplicant restart </pre>

==== Sound ====
Modules need not to be compiled, sound support is built into kernel. Install alsa-utils. 

<pre>
sudo aplay /usr/share/sounds/alsa/Front_Left.wav
</pre>

NikkSaan provided an advanced audio configuration in [https://github.com/postmarketOS/pmbootstrap/pull/702#issuecomment-380999740 #702 (comment)].

==== Keyboard Backlight ====

There are 6 keyboard backlight LEDs that can be adjusted, they are found under <code>/sys/class/leds/lp5523:kb{1-6}</code>. To adjust brightness, write a value, $VAL between 0 and 255, to the <code>brightness</code> parameter as the root user:

<pre>for i in $(seq 1 6);
    do echo $VAL &gt; /sys/class/leds/lp5523\:kb$i/brightness
done</pre>

==== Keyboard layout ====

===== Console =====

The keyboard layout for the virtual console is asked during <code>pmbootstrap init</code> after you select the <code>nokia-n900</code> device.

Available keymaps:

* <code>us/rx51_us</code>
[[File:N900 keymap us.jpg|800px]]
* <code>ch/rx51_ch-de</code>
[[File:N900 keymap ch-de.jpg|800px]]


To obtain your desired language keymap file for the RX-51, [https://raw.githubusercontent.com/archlinuxarm-n900/n900-keymaps/master/rx51_us.map such as this one]:

* On the N900, install <code>kbd-bkeymaps</code>, either by using <code>pmbootstrap install --add kbd-bkeysmaps</code> on the host system or by running <code>apk add kbd-bkeysmaps</code> on the device itself.

* The keymap must be in binary format, bmap. This can be accomplished using the <code>loadkeys</code> tool:

<source lang="shell">$ apk add kbd kbd-bkeymaps
$ loadkeys -b rx51_us.map > rx51_us.bmap
$ gzip rx51_us.bmap</source>

* Compress it and copy it to <code>/usr/share/bkeymaps/us/</code> on the N900.

* Log into the N900, and run <code>sudo setup-keymap</code>, then select <code>us</code> and finally <code>rx51_us</code>.

(TODO: Need to pull 'official' vconsole keymaps from Maemo5 if they exist..)

===== X11 =====

In X11 you can use <code>setxkbmap</code> to configure the desired layout.

Right now it's configured to use the <code>nokiarx51/us</code> layout by default (see [https://github.com/postmarketOS/pmbootstrap/blob/a7afd519eff34237dfe2766634ac6b2c5076e9f5/aports/device/device-nokia-n900/keymaps/40-xkb.conf 40-xkb.conf]).

{{note| Info: Tab is ctrl+i}}

===== Console switching =====

You can use the <code>[[File:Nokia-n900-blue-arrow.PNG|30px]] blue arrow</code> key in combination with the <code>Volume Up/Down</code> to switch to a different virtual terminal.

If you installed postmarketOS with a UI, you first have to enable again the other VT by editing the <code>/etc/inittab</code> file and uncomment the following lines:
<syntaxhighlight lang="sh">
...
# Set up a couple of getty's
tty1::respawn:/sbin/getty 38400 tty1
tty2::respawn:/sbin/getty 38400 tty2
tty3::respawn:/sbin/getty 38400 tty3
tty4::respawn:/sbin/getty 38400 tty4
tty5::respawn:/sbin/getty 38400 tty5
tty6::respawn:/sbin/getty 38400 tty6
...
</syntaxhighlight>

==== Display ====

With DRM enabled ([https://github.com/postmarketOS/pmbootstrap/pull/197 #197]), the display can be managed at this location: <code>/sys/devices/platform/omapdrm.0/graphics/fb0/</code>

For example, the display can be turned off by:

<pre># echo 1 &gt; /sys/devices/platform/omapdrm.0/graphics/fb0/blank</pre>

To adjust brightness:

<pre>
# # Replace $VAL with a value from 0 to 255:
# echo $VAL > /sys/class/backlight/acx565akm/brightness
</pre>

==== GUI ====

===== XFCE4 =====
[[XFCE4]] works well.

===== i3wm =====
[[I3wm]] also works very well with the N900 due to the hardware keyboard, and MartijnBraam created some nice configs which have are included in the standard postmarketos-ui-i3wm installation.
* [https://www.reddit.com/r/unixporn/comments/7wt8ig/i3gaps_n900_restored_to_glory/ in action]

===== Hildon =====

As of 15th May 2018, Hildon is unusably slow. This is due to the fact that Hildon requires acceleration which is not supported at the date of writing.

===== Others =====
There are also Mate, Matchbox, etc.

===== Misc: Power button =====
If you want to make use of the power button, bind <code>XF86PowerOff</code> to this script:
<syntaxhighlight lang="sh">
FILE=~/.screenoff
if [ -f $FILE ]; then
    xinput set-prop 8 "Device Enabled" 1
    xinput set-prop 6 "Device Enabled" 1
    xinput set-prop 9 "Device Enabled" 1
    xset dpms force on
    rm ~/.screenoff
else
    xinput set-prop 8 "Device Enabled" 0
    xinput set-prop 6 "Device Enabled" 0
    xinput set-prop 9 "Device Enabled" 0
    xset dpms force off
    touch ~/.screenoff
fi
</syntaxhighlight>

{{note|You cannot use this to turn the screen back on if i3lock or similar is running, as they would grab the keys}}

===== Misc: Middle click =====
Obviously, you can't middle click with a touchscreen, but this can be annoying when it's one of the few ways to paste in the terminal.
This script simulates a middle click:
<syntaxhighlight lang="sh">
xdotool mousedown --clearmodifiers 2
xdotool mouseup 2
xdotool keyup alt
xdotool keyup ctrl
xdotool keyup shift
</syntaxhighlight>

You can bind it to any key you wish. <code>XF86WebCam</code> is a good choice since it's fairly easy to reach and isn't used for anything.

==== Battery ====
===== Charging =====

Battery charging is fully supported by the kernel and does not need any special configuration.

===== Capacity Reporting =====

The current battery capacity can be found under <code>/sys/class/power_supply/bq27200-0/capacity</code>, and is represented as a percentage. For example, a value of <code>11</code> equates to <code>11%</code>. If <code>capacity</code> does not exist or contains erroneous information, then your battery needs to be calibrated. To calibrate the battery:

1) Charge it up '''fully''', using a wall power adapter.

2) Unplug the device and allow the battery to run all the way down until it powers off. This may take quite a while to happen (&gt;24hrs, but can be made shorter by running a CPU intensive workload). Do not let it charge at all during this time. This means you may not use USB for example, as this automatically causes the device to start charging, albeit slowly.

3) When device eventually powers off, the battery charge gauge chip should then be calibrated. You may charge it up again to use the device.

[http://www.ti.com/lit/ds/symlink/bq27200.pdf Datasheet for the bq27200 charge gauge chip]

'''Hint: '''To disable the LED charging indication, disable the charging chip's status pin. 

<code>echo 0 > /sys/class/power_supply/bq24150a-0/stat_pin_enable</code>.

[http://www.ti.com/lit/ds/symlink/bq24150.pdf Datasheet for the bq24150 charging chip]

==== Clock ====
===== Setting the hardware clock =====

Since 49fd9e0e4efcf030ca47344858bdc74370a78603 the hardware clock works. If your hardware clock doesn't have the time set you can set it with:

<source lang="shell"># Get the system date in the right ballpark so ntpd works
$ date -s "2017-08-14 16:34:50"

# Write the current system time to the hardware clock
$ hwclock -w</source>

===== Setting the hardware alarm clock =====

Realtime clock at /dev/rtc0 is on the twl4030 (PMU), and allows setting an alarm to wake the device from sleep, poweroff states. 

Control trough <code>rtcwake</code> [https://linux.die.net/man/8/rtcwake (Manual Page)].
<source lang="shell">
# Suspends the device to memory for 10 seconds
rtcwake --verbose --seconds 10 --mode mem

# Power off the device and power it on after $TIME, where $TIME is the number of seconds since epoch (1970-01-01)
rtcwake --verbose --time_t $TIME --mode no
/sbin/poweroff
</source>

Manual control from sysfs:
<source lang="shell">
# To set the wakealarm directly, set $TIME to number of seconds since epoch (1970-01-01). Then poweroff or suspend:
echo $TIME > /sys/class/rtc/rtc0/wakealarm
 	
# To set new wakealarm time, first reset time to 0!
echo 0 > /sys/class/rtc/rtc0/wakealarm
</source>

{{note| When setting number of seconds since epoch, make sure you account for your timezone and see how your realtime clock keeps the time (utc or local)!}}

==== SMS ====


In order to use the ofono test scripts, you must install py-dbus, that is currently available only for python2.

{{note|The N900 needs internet access to perform these steps. See the section above on setting up Wifi.}}
{{note|Your date/time need to be correct in order for HTTPS to work. You can use ntpd to do this.}}
<pre>
# apk add git py-dbus
# git clone --depth 1 https://git.kernel.org/pub/scm/network/ofono/ofono.git
</pre>

Here's an example using the test scripts to enable the modem and send a SMS:
<pre>
# cd ofono/test
# python2 enable-modem
# python2 online-modem
# python2 send-sms 5033784582 "I like pizza." 0 
</pre>

==== USB Gadget ====
===== Mass Storage =====
The Mass Storage class exposes a block device as a flash drive on your host machine. 

For example, to use the "MyDocs" partition as Mass Storage Device, make sure you unmount the partition first (if mounted), then execute:

<code>
echo /dev/mmcblk1p1 > /sys/devices/platform/68000000.ocp/480ab000.usb_otg_hs/musb-hdrc.0.auto/gadget/lun0/file
</code>
 
If you only need read permissions on the partition, you can set the read-only flag before exporting it:

<code>
echo 1 > /sys/devices/platform/68000000.ocp/480ab000.usb_otg_hs/musb-hdrc.0.auto/gadget/lun0/ro
</code>

==== GPRS ====

GPRS can be managed by [https://pkgs.alpinelinux.org/package/edge/testing/armhf/connman connman]. Either install connman using <code>apk</code> or add it when installing pmOS by passing <code>--add connman</code> to <code>pmbootstrap</code>.

{{note|Once you perform the following steps, the GPRS connection will be established by connman automatically on every boot.}}

It's '''VERY''' important that you add the following to <code>/etc/connman/main.conf</code> '''BEFORE''' starting connman, else it will take over all network connection handling and disconnect you if you are connected over SSH:

{{hc|/etc/connman/main.conf|<nowiki>
NetworkInterfaceBlacklist = usb,wlan
</nowiki>}}

Configure connman to start at boot:

<code>$ sudo rc-update add connman</code>

Stop ofono in order to set APN:

<code>$ sudo rc-service ofono stop</code>

Edit APN, where <IMSI> should be replaced in the following commands with the IMSI from your SIM card. Replace <APN> with the relevant APN for your cellular carrier (e.g. fast.t-mobile.com).
This file should be created when ofono starts, so you should only need to add the APN.

{{hc|/var/lib/ofono/<IMSI>/gprs|<nowiki>
[Settings]                                                                                                                                                                                                                                                                                                                                                              
Powered=true                                                                                                                                                                                                                                                                                                                                                            
RoamingAllowed=false                                                                                                                                                                                                                                                                                                                                                    
                                                                                                                                                                                                                                                                                                                                                                        
[context1]                                                                                                                                                                                                                                                                                                                                                              
Name=Internet                                                                                                                                                                                                                                                                                                                                                           
AccessPointName=<APN>                                                                                                                                                                                                                                                                                                                                      
Username=                                                                                                                                                                                                                                                                                                                                                               
Password=                                                                                                                                                                                                                                                                                                                                                               
AuthenticationMethod=chap                                                                                                                                                                                                                                                                                                                                               
Type=internet                                                                                                                                                                                                                                                                                                                                                           
Protocol=ip  
</nowiki>}}

Start ofono and power on modem.

<pre>
$ sudo rc-service ofono start
$ sudo connmanctl enable cellular
</pre>

In some cases, it seems necessary to run a scan before the necessary service will show in connman, even though the scan is 'unsupported':
<pre>
$ sudo connmanctl scan cellular                                                                 
Error /net/connman/technology/cellular: Not supported                                     
$ sudo connmanctl services
cellular_340369959729712_context1
</pre>

Connect to the cellular service:

<pre>                                
$ sudo connmanctl connect cellular_340369959729712_context1                                     
Connected cellular_340369959729712_context1
$ ip addr show gprs0
10: gprs0: <POINTOPOINT,NOARP,UP,LOWER_UP> mtu 1400 qdisc pfifo_fast state UNKNOWN qlen 10
    link/[821] 
    inet 33.238.141.172/32 brd 33.238.141.172 scope global gprs0
       valid_lft forever preferred_lft forever
</pre>

==== GPS ====

First, get network and date to work. Next, clone tui repository. it contains includes many goodies, including script for hardware testing, gps support, and graphical ofono control software.

<pre>
mkdir /my
cd /my
git clone https://gitlab.com/tui/tui.git
</pre>

Next, install packages necessary for compiling software and prepare gps2. enable-modem, online-modem and you should be able to run gps2. AGPS is not available, so expect long startup.

<pre>
apk add gcc vala musl-dev make linux-headers gpsd
cd /my/tui/ofone
make gps2
./gps2
</pre>

gps2 will not talk to gpsd, so it is only useful to verify that hardware is working.

=== Resources ===
* [https://gitlab.com/postmarketOS/pmbootstrap/tree/master/aports/device/device-nokia-n900 Device package]
* [https://kernel.org Kernel source]
* [https://web.archive.org/web/20131117073524/http://skeiron.org/tablets-dev/nokia_N900/ Images and Flashers for Maemo]
* {{issue|1617}} issue about Wi-Fi Setup and Keyboard layout

=== Helpful Links for Porting ===
* [https://neo900.org/stuff/block-diagrams/n900/n900.html Device schematic]
* [http://plan9.stanleylieber.com/hardware/n900/n900.schematics.pdf Very detailed schematic]
* [https://github.com/archlinuxarm-n900/alarm-n900/wiki/Hardware-support Arch Linux ARM - N900 hardware components list]
* [http://mlab.taik.fi/paja/?p=1263 N900 sensor access in Maemo]
* [http://natisbad.org/N900/n900-commented-hardware-specs.html Hardware component specs / list]
* [http://elinux.org/N900 Kernel status]
