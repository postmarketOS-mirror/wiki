We aim to have ideally only one device specific package. Other packages should be shared between all devices.

However, in practice, we need an extra package for the kernel (unless the device has been [[The Mainline Kernel|mainlined]]). And sometimes one for device specific [[firmware]] (in theory it is possible to divide these in the firmware files for specific chips, and then share these chip-specific firmware packages across multiple devices, but we're not quite there yet).

Every device specific package contains at least the [[deviceinfo]] file, and the {{alpine|APKBUILD}}. This article describes special characteristics of the device <code>APKBUILD</code>.

== Generate a template ==
The recommended way to start with a new device package is using <code>pmbootstrap init</code> and typing in a new device name. But it is also possible to directly call the device package wizard with <code>pmbootstrap aportgen device-changeme-changeme</code> (adjust <i>changeme</i> accordingly).

== devicepkg-dev ==
In order to share code between the <code>APKBUILD</code>s of these packages, all new device packages depend on a <code>devicepkg-dev</code> package and call its functions inside their <code>APKBUILD</code>s:

<syntaxhighlight lang="bash">
makedepends="devicepkg-dev"

build() {
	devicepkg_build $startdir $pkgname
}

package() {
	devicepkg_package $startdir $pkgname
}
</syntaxhighlight>

The variables <code>$startdir</code> and <code>$pkgname</code> are always available where they are used, and must be passed to these functions. <code>devicepkg_build</code> and <code>devicepkg_package</code> are simple shell scripts, and they get packaged from [https://gitlab.com/postmarketOS/pmaports/tree/master/main/devicepkg-dev here].

=== devicepkg_build ===
Optionally creates an udev rule for the device's touch screen, based on the data from the <code>deviceinfo</code>. We can extend this to do more when it makes sense.

The source code is in [https://gitlab.com/postmarketOS/pmaports/blob/master/main/devicepkg-dev/devicepkg_build.sh devicepkg_build.sh] of the devicepkg-dev pmaport.

=== devicepkg_package ===
Installs the <code>deviceinfo</code> file (to <code>/etc/deviceinfo</code>) and all other files, that may have been generated during <code>devicepkg_build</code>.

The source code is in [https://gitlab.com/postmarketOS/pmaports/blob/master/main/devicepkg-dev/devicepkg_package.sh devicepkg_package.sh] of the devicepkg-dev pmaport.

== Use install_if to pull in packages ==
If your device requires a specific X11 driver for example, it is possible to say: "Install this driver when this device package and Xorg are installed.".

Here is one example from [https://gitlab.com/postmarketOS/pmaports/tree/master/device/device-qemu-amd64 <code>device-qemu-amd64</code>]:
<syntaxhighlight lang="bash">
subpackages="$pkgname-x11"

x11() {
	install_if="$pkgname xorg-server"
	depends="xf86-video-qxl"
	mkdir "$subpkgdir"
}
</syntaxhighlight>

We only create the <code>$subpkgdir</code>, because building subpackages fails, when the subpackage folder does not exist. You can add multiple subpackages per package, see {{alpine|APKBUILD_Reference#subpackages}}.

== Add a device specific config file ==
It might be, that you would like to disable Xweston for your device, because it does not work and then weston does not start. To accomplish this, we will also  make use of <code>install_if</code> and a subpackage. But this time we won't pull in another package, but install the config file:
<syntaxhighlight lang="bash">
subpackages="$pkgname-weston"
source="deviceinfo weston.ini"

weston() {
	install_if="$pkgname weston"
	install -Dm644 "$srcdir"/weston.ini \
		"$subpkgdir"/etc/xdg/weston/weston.ini
}
</syntaxhighlight>

This will only install the custom Weston config, when <code>weston</code> is installed. The <code>$subpkgdir</code> is implicitly created with <code>install -D</code>.

== Proprietary firmware or userland blobs ==
The actual blobs don't belong into the device package, but into their own package:
* Either a <code>linux-firmware-*</code> package [https://pkgs.alpinelinux.org/packages?name=linux-firmware-*&branch=edge&repo=main&arch=armhf from Alpine]
* Or a <code>firmware-</code> package (for firmware, use another name for userland blobs) from postmarketOS' aports
** check out the existing ones we already have for reference.

Once you have that package, modify your device package:
* Add <code>$pkgname-nonfree-firmware:nonfree_firmware</code> or <code>$pkgname-nonfree-userland:nonfree_userland</code> to the <code>subpackages=""</code> line
** Do not replace the <code>$pkgname</code> variable.
** If you're packaging both firmware and userland blobs, then add both subpackages.
* Add a block based on the following at the end of your device package's <code>APKBUILD</code>, before the <code>sha512sums</code>.
** Replace <code>nonfree_firmware</code> with <code>nonfree_userland</code> depending on what you're packaging.
** Change <code>firmware-motorola-titan</code> to the blob package that you found/made for your device.
** Adjust the <code>pkgdesc</code> accordingly. It will be shown to the user in <code>pmbootstrap init</code> when deciding how libre they want their postmarketOS installation to be.
** Keep the <code>$subpkgdir</code> variable, that variable exists in this context.
: <syntaxhighlight lang="bash">
nonfree_firmware() {
	pkgdesc="Wifi firmware"
	depends="firmware-motorola-titan"
	mkdir "$subpkgdir"
}
</syntaxhighlight>

== Multiple kernels ==
This is relevant in case it is possible to boot your device with multiple kernels (most common case is the downstream kernel from the vendor <code>linux-$devicename</code>, and one of the upstream <code>linux-postmarketos-*</code> kernels).

* Remove the current kernel package from <code>depends</code> of your device's <code>APKBUILD</code>
* Add the kernel subpackages and subpackage functions. One example from <code>device-sony-amami</code>:
: <syntaxhighlight lang="bash">
...
subpackages="
	$pkgname-kernel-downstream:kernel_downstream
	$pkgname-kernel-mainline:kernel_mainline
	$pkgname-nonfree-firmware:nonfree_firmware
"
...
kernel_downstream() {
	pkgdesc="Display and wifi works (see device table for details)"
	depends="linux-sony-amami"
	devicepkg_subpackage_kernel $startdir $pkgname $subpkgname
}

kernel_mainline() {
	pkgdesc="For kernel development only (most features aren't working)"
	depends="linux-postmarketos-mainline"
	devicepkg_subpackage_kernel $startdir $pkgname $subpkgname
}
...
</syntaxhighlight>
* Additionally in your <code>deviceinfo</code> file you can use the suffix from your kernel subpackage (e.g. <code>_mainline</code> or <code>_downstream</code>) to limit the variables to one kernel variant in case you need different values. An example:
: <syntaxhighlight lang="bash">
...
deviceinfo_dtb_mainline="qcom-msm8974-fairphone-fp2"
deviceinfo_append_dtb_mainline="true"
...
deviceinfo_bootimg_qcdt_downstream="true"
...
</syntaxhighlight>
* Also consider adjusting the dependencies of your device package to not include downstream- or mainline-specific helper packages, such as <code>adsp-audio</code>, <code>wcnss-wlan</code> or <code>modem-qcom-msm-downstream-common</code>. You can use <code>device-fairphone-fp2</code> as an example for that.
* Run <code>pmbootstrap init</code> afterwards to test the change. It should ask you for the kernel now.
* See <code>device-qemu-amd64</code> for another example.
* Implementation details and discussion in {{github|1363}}

== Initramfs hook ==
Some devices need to run special commands at boot time, for example turning on the display or kicking a watchdog. It is possible to do this with a device specific initramfs hook.

Create a new <code>initfs-hook.sh</code> file in your device package's dir and fill it with the command that needs to be executed, along with a comment describing what it does:
<syntaxhighlight lang="shell">
#!/bin/sh

# set usb properties
echo 4 > /sys/devices/platform/android_usb/usb_function_switch
</syntaxhighlight>

Then open the APKBUILD and add <code>initfs-hook.sh</code> to <code>source=</code>.

As usually, update the checksums, build the package with <code>--force</code> and test the hook on your device.

=== Notes ===
If you have a modern device-specific APKBUILD (i.e. because you have just generated it), it will use <code>devicepkg_package</code> in <code>package()</code>, which will detect the initfs hook and install it automatically ({{MR|191|pmaports}}). This is the preferred way to do things. Otherwise you would have to copy [https://gitlab.com/postmarketOS/pmaports/blob/0d966c7a6fe92486c5b9b8fe4525fef7f89c3a90/main/devicepkg-dev/devicepkg_package.sh#L30-31 this install command] to the end of your <code>package()</code> function.

For reference, you can look at the existing initfs-hooks:
<syntaxhighlight lang="shell-session">
$ cd ~/code/pmbootstrap/aports/device
$ find -name initfs-hook.sh
./device-motorola-osprey/initfs-hook.sh
./device-samsung-i9070/initfs-hook.sh
./device-htc-m8/initfs-hook.sh
./device-htc-a5ul/initfs-hook.sh
...
</syntaxhighlight>

== See also ==
* [[deviceinfo]]
* [[vendor kernel specific package]]


[[Category:Technical Reference]]
