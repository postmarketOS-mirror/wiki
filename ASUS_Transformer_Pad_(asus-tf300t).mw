{{Infobox device
| manufacturer = ASUS
| name = Transformer Pad
| codename = tf300t
| image = File:ASUS Transformer Pad.jpg
| imagecaption = ASUS Transformer Pad
| releaseyear = 2012
| originalsoftware = Android 4.0 on Linux 3.1
| chipset = Nvidia Tegra 3 T30
| cpu = Quad-core 1.2 GHz Cortex-A9
| gpu = ULP GeForce
| storage = 16/32 GB
| display = 1280x800 IPS
| memory = 1 GB
| architecture = armv7
| status_usbnet = 
| status_flashing = 
| status_touch = 
| status_screen = 
| status_wifi = 
| status_xwayland = 
| status_fde = 
| status_mainline = P
| status_battery =
| status_3d = 
| status_accel = 
| status_audio = 
| status_bluetooth =
| status_camera =
| status_gps = 
| status_mobiledata = 
| status_sms = 
| status_calls =
| status = Framebuffer doesn't work
| booting = no
}}

== Contributors ==

* jonty-comp
* Jasper (working on [[ASUS Transformer Pad Infinity]])
* MartijnBraam

== What works ==

* Mainline kernel should work, if anyone has device, feel free to contact me on Matrix and we can try (nickname okias). Kernel [https://github.com/grate-driver/linux/ source]
* Compiling CM13 kernel ([https://github.com/LineageOS/android_kernel_asus_tf300t GitHub])
* Compiling 4.14-rc3 with tf300t specific patches
* Flashing via Android recovery zip (Boot image included)
* System boots
* Most sensors/cameras/devices seem to be detected (e.g. accelerometer values can be read from <code>/sys</code> etc)

== What does not work (downstream kernel) ==

* Flashing via fastboot (device appears to write successfully but then locks up and does not apply the uploaded image)
* Framebuffer (stuck on ASUS bootloader graphic)

The framebuffer issue is an interesting one as it works without issue on CM13-based Android ROMs with the same kernel and defconfig.  Possible toolchain issue or patch needed for GCC6.
Devices with a working framebuffer output modesetting information in <code>dmesg</code> after loading the tegradc driver, but the PMOS compiled kernel does not.  Common fixes including setting values in <code>/sys</code> have no effect yet.

== Unlocking ==
The first step to do anything with the device is unlocking, with this device its done by sideloading the unlock apk from asus and clicking a few buttons in the app. The apk can be found on [https://www.asus.com/Tablets/ASUS_Transformer_Pad_TF300T/HelpDesk_Download/ the asus support page].

== Fastboot issue ==
It seems like the bootloader doesn't handle flashing the boot and userdata partition correctly, the official firmware package flashes an "Android blob" to the staging partition with fastboot which triggers an flashing screen on the tablet which copies the data to the correct partitions.

After unlocking the device the blobs still needs to have some signature which can be generated by [https://github.com/drwowe/BlobTools drwowe/BlobTools]. This repository adds the -s option to sign the generated blobs.

<source lang="shell-session">$ ./pmbootstrap.py export /example
...
$ blobpack -s output.blob LNX /example/boot.img-asus-tf300t APP asus-tf300t.img
Found 2 partitions as commandline arguments
Partname: LNX Filename: boot.img-asus-tf300t
Partname: APP Filename: asus-tf300t.img
Size: 60
2 partitions starting at offset 0x3C
Offset: 92
$ fastboot flash staging output.blob
target didn't report max-download-size
sending 'staging' (680522 KB)...
OKAY [113.288s]
writing 'staging'...
FAILED (remote: (InvalidSize))
finished. total time: 116.623s</source>

The update doesn't get updated yet with this code but at least the bootloader doesn't freeze anymore after the flashing command.
== See also ==
* [https://github.com/jonty-comp/pmbootstrap/tree/device-asus-tf300t jonty-comp's kernel] [https://github.com/postmarketOS/pmbootstrap/tree/device-asus-tf300t jonty-comp's postmarketos/device-asus-tf300t]
