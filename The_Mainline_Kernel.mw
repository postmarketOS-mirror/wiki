== Introduction ==
We want to get as many devices working with one shared kernel package (based on [https://kernel.org upstream]). Making a device boot with the upstream kernel is commonly referred to as <i>mainlining</i>.

=== Why bother? ===
Carrying around forks of the kernel is not sustainable as it becomes impossible to provide security patches after a short time. The only way to truly fix this for a device is mainlining it.

=== Mainlining guide ===
See [[Mainlining Guide]].

=== Kernel packaging ===
That package is <code>linux-postmarketos-stable</code>. For devices, which are in the kernel's <code>mainline</code> release, but not yet in <code>stable</code> (see [https://www.kernel.org/category/releases.html kernel releases]), we also have <code>linux-postmarketos-mainline</code>. It is even allowed to carry temporary patches around on top of these kernels, as long as work is being done to get them upstreamed properly. The kernel packages based on the official one are in <code>aports/main/postmarketos-linux*</code>, while the device-specific forks are in <code>aports/device/linux-*</code>.

To make the kernel work with multiple devices, it no longer appends the <code>dtb</code> file to the kernel image. Instead, it puts all <code>dtb</code> files for the current architecture in <code>/usr/share/dtb</code>. The <code>postmarketos-mkinitfs</code> package appends the <code>dtb</code> file defined in the [[deviceinfo]] to the linux image in the boot partition.

== Device tree source (ARM architecture) ==
To make your device boot, you will need a device tree source (<code>dts</code>) file (which will get compiled to a <code>dtb</code> mentioned above). Check the <code>arch/arm/boot/dts</code> (replace <code>arm</code> with your architecture) folder in the kernel source code for relevant files ([https://elixir.bootlin.com/linux/latest/source/arch/arm/boot/dts browse online]) with your device's codename. The general file naming is <code>$chipset_vendor-$chipset-$vendor-$codename.dts</code>.

Examples:
* <code>qcom-msm8974-lge-nexus5-hammerhead.dts</code>
* <code>qcom-msm8974-sony-xperia-honami.dts</code>
* <code>qcom-apq8064-sony-xperia-yuga.dts</code>
* <code>qcom-apq8064-asus-nexus7-flo.dts</code>

When you don't have a result, try to find a <code>dts</code> file with the same chipset as your device (e.g. <code>msm8974</code>). Try to create a new one for your device based on that by [[How_to_create_a_patch_when_packaging_software|creating a patch]] for <code>linux-postmarketos-stable</code>. If there is not even a <code>dts</code> file for the same chipset, you need to create one from scratch (''no idea how to do that, good luck and please extend the wiki'').

== Enable the mainline kernel for a new device ==
''Before proceeding, make sure that you know that your device is supported by the mainline kernel. Otherwise use the source code of a vendor's fork of the kernel, which is known to work as described in the [[porting guide]].''

# run <code>pmbootstrap.py kconfig edit postmarketos-qcom</code> and adjust the kernel config to add the drivers for the device if they are not enabled yet. Set as much drivers to build as external module as possible so the main vmlinuz filesize doesn't increase too much. Replace <code>qcom</code> with the kernel config you want to modify (see <code>ls aports/main/linux-postmarketos-*</code>).
# Set the kernel dependency to <code>linux-postmarketos</code> in the APKBUILD for the device package if you want to make it the default kernel ([https://github.com/postmarketOS/pmbootstrap/issues/91#issuecomment-318825285 more information]).
# Add the name of the generated dtb file (without path or extension) to the <code>deviceinfo_dtb</code> file in the deviceinfo file.

A good example of a device using a mainline kernel is the <code>device-nokia-rx51</code> package.

=== Links ===
* [[Mainlining FAQ]] various information collected from #postmarketOS
* [[Qualcomm mainline porting]]
* [http://linux-sunxi.org/Linux_mainlining_effort Allwinner mainline effort]
* Blog about [http://elektranox.org/droid4/ mainline kernel support for the Motorola Droid 4]
* [https://github.com/freedreno/freedreno/wiki/DSI-Panel-Driver-Porting Freedreno wiki: Display driver porting]
* [http://elixir.free-electrons.com/linux/v3.17/source/include/video/mipi_display.h#L28 List of DTSI -> panel driver function translations]
* [https://github.com/postmarketOS/pmbootstrap/issues/91 #91: &quot;The Mainline Kernel&quot;]
* [http://n900.elektranox.org/index.html Debian on N900]
* [https://developer.sony.com/develop/open-devices/guides/kernel-compilation-guides/how-to-build-mainline-linux-kernel-for-xperia-devices Build Mainline for Xperia devices]
* [https://forum.xda-developers.com/android/software-hacking/reference-how-to-upstream-android-kernel-t3626913 How to get an Android kernel up to date with Linux upstream]
* [https://nickdesaulniers.github.io/blog/2017/05/16/submitting-your-first-patch-to-the-linux-kernel-and-responding-to-feedback/ Submitting your first patch to the Linux kernel and responding to feedback]
* [http://kroah.com/log/blog/2018/02/05/linux-kernel-release-model/ Linux Kernel Release Model] (reasons why we should all be using mainlined kernels)
* [https://talk.maemo.org/showthread.php?t=99357 Documenting devices with mainline Linux support]
* [https://elinux.org/Device_Tree_Reference Device Tree reference on elinux.org]
* [https://elixir.bootlin.com/linux/latest/source/Documentation/devicetree Documentation of devicetree bindings]
* [https://matrix.to/#/!clcCCNrLZYwdfNqkkR:disroot.org/$152104340146547HXnql:matrix.org opendata26 walking alibabzo through mainlining aries]
* [https://www.youtube.com/watch?v=LPG4EkXK9Us ARM64 SoC Linux Support Check-List (what needs to be done to get an arm64 soc to work on mainline)]
* [https://github.com/efidroid/projectmanagement/wiki/%5BReference%5D-Chipsets probably a list of which qualcomm socs are similar]
* [https://redmine.replicant.us/projects/replicant/wiki/Upstream Replicant upstream kernel and upstream bootloader wiki]
* {{issue|191|pmaports}} Getting started tips from zhuowei

[[Category:Technical Reference]]
