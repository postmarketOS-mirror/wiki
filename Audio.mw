{{note|If you're trying out anything and learn something that would have helped, please extend this wiki page.}}

== Audio on Android ==

=== Mixer configuration ===

This provides a brief overview of how Android audio HALs configure the ALSA mixer.

Android devices can have an assortment mixer configurations such as headphones, speakers, or microphones. For a particular device the audio route configurations are defined in <code>mixer_paths.xml</code>. [https://android.googlesource.com/device/lge/hammerhead/+/kitkat-release/mixer_paths.xml For an example see the mixer path XML for Nexus 5 (hammerhead).]

Android audio HALs make use of [https://android.googlesource.com/platform/external/tinyalsa/ tinyalsa] and [https://android.googlesource.com/platform/system/media/+/kitkat-release/audio_route/ audio_route]. Tinyalsa is a small standalone library to interface with ALSA in the Linux kernel. Audio HALs call the <code>audio_route</code> library which loads audio routes from an XML and controls the mixer through <code>tinyalsa</code>.

==== Format of mixer_paths.xml ====
* ALSA controls are defined by <code>ctl</code> elements.
* Audio routes are defined by <code>path</code> elements. A <code>path</code> element contains a collection of <code>ctl</code> elements as well as other <code>path</code> elements.
* The path <code>name</code> attribute is used to select an audio route.

=== Headphone jack ===

Android kernels use <code>switch_class</code> kernel driver to notify the Android frameworks of headphone jack events. The driver source code can be located at:
<code>drivers/switch/switch_class.c</code>
or
<code>drivers/staging/android/switch/switch_class.c</code>.

The [https://android.googlesource.com/platform/frameworks/base/+/kitkat-release/services/java/com/android/server/WiredAccessoryManager.java WiredAccessoryManager] monitors the <code>/sys/class/switch/h2w</code> for uevents when the headphone is (un)plugged.

''Note: The switch class driver is an Android specific driver. It has not been upstreamed to the mainline kernel.''

== Converting Android configurations using xml2ucm ==
{{note|This section is incomplete. It requires a reference to more complete documentation of the device config XML format.}}

The audio routes in Linux userspace can be defined in ALSA UCM configuration files. There is a tool called [https://github.com/ford-prefect/xml2ucm xml2ucm] which will convert the Android <code>mixer_paths.xml</code> and a <code><device>-config.xml</code> to UCM files. The <code>xml2ucm</code> tool introduces the device config XML which provides necessary routing information that was hardcoded in the audio HAL on Android.

The <code>mixer_path.xml</code> is commonly found in the Android device repository. (e.g. <code>android_device_lge_hammerhead</code>). You must write the device config XML for your device.

==== Format of device config XML ====
Android audio HALs can and do select multiple audio routes at once. For example a headset can have an output route and a microphone input route. To handle this a <code>device</code> element (the headset) can contain multiple <code>path</code> elements (audio routes). Example device config XML files are provided in the <code>xml2ucm</code> repository.

Once the <code>mixer_path.xml</code> and <code><device>-config.xml</code> are converted to UCM format then an audio route can be set by using <code>alsaucm</code>.

Example: <code>alsaucm -c <ctl-device> set _verb <use-case> set _enadev <device></code>

== alsactl method ==
Cascardo reported having success with the following method on Debian, this should work for postmarketOS as well:
<blockquote>
I ran a debian chroot on a cyanogenmod, set the volume up, then ran alsactl save on the chroot. booted into debian, then after alsactl restore was run, I had audio working

so, in summary, it's hard to know which mixer settings will make it work, so my strategy was running some android stack that correctly set the mixer, then saving the state with a chroot or any other tool that would allow you to save, copy and restore that state later on a gnu stack
</blockquote>

This method may work for non-Android devices as well, as long as you see an audio device in <code>alsamixer</code>. Just boot the normal OS, save the volume settings somehow, then restore them.

== WM1811 ==

This audio chip is present in several Samsung devices that are based on the Exynos 4412 platform. There is a configuration for the Samsung Galaxy Note 10.1 available at [https://code.google.com/archive/p/opensgn/source/default/source the opensgn project]. Have a look at the files in <code>opensgn/data/n8000/usr/share/alsa/ucm/Midas_WM1811/</code>.
In <code>opensgn/data/n8000/etc/rc.local</code> there are the commands to use the configuration:

<pre>
# restore alsa sinitial tate
/usr/sbin/alsactl restore -f /usr/share/alsa/ucm/Midas_WM1811/init.state

# enable speaker for output and builtin mic for input
/usr/bin/alsaucm -c Midas_WM1811 set _verb HiFi set _enadev Speaker
/usr/bin/alsaucm -c Midas_WM1811 set _verb HiFi set _enadev Mic
</pre>

For other devices the configuration might need to be adapted. On the Samsung Galaxy Note 8.0 for example, the audio device is named "Kona_WM1811". Replacing all occurrences in file names and file contents of <code>Midas</code> by <code>Kona</code> worked.

== See also ==
* {{github|1328}} Audio added to samsung-p4wifi with udev rules for redirecting audio to headphones when plugging them in
* [https://arunraghavan.net/2016/01/audio-devices-and-configuration/  How to convert Android Audio configurations to alsa/pulseaudio]
