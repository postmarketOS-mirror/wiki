{{Infobox device
| manufacturer = Purism
| name =  Librem 5 Devkit
| codename = purism-librem5dev
| image = File:purism-librem5dev.jpg
| imagecaption = 
| releaseyear = 2018
| originalsoftware = PureOS
| chipset = Emcraft NXP i.MX8M
| cpu = NXP i.MX8M
| gpu = Vivante GC7000Lite
| storage = 32 GB EMMC
| display = 1440x720
| memory = 3 GB
| architecture = aarch64
<!-- the following status_* questions should be answered with Y - yes, P - partial, N - no, or left blank (for untested or unknown) -->
| status_usbnet = <!-- USB networking does work? then put Y here and delete this comment -->
| status_flashing = <!-- Flashing with "pmbootstrap flasher" works? Put Y here. It works the same for everything coming below. -->
| status_touch = Y
| status_screen = Y
| status_wifi = P
| status_xwayland = P
| status_fde = <!-- When installing with full disk encryption, can you type in the password with the on screen keyboard? -->
| status_mainline = <!-- Instead of a Linux kernel fork, it is possible to run mainline. -->
| status_battery = <!-- Charging the battery with charging-sdl is possible -->
| status_3d = P
| status_accel = <!-- The sensor that measures proper acceleration works -->
| status_audio = P
| status_bluetooth = P
| status_camera = <!-- Taking photos and videos works. -->
| status_gps = Y
| status_mobiledata = <!-- Connecting to the Internet via cellular network. -->
| status_sms = <!-- Sending and receiving short messages works as intended. -->
| status_calls = <!-- Talking to other people over the cellular network. -->
| status_otg = P
| booting = Y
}}

== Contributors ==
* ''[https://github.com/craftyguy craftyguy]''

== How to enter flash mode ==

The devkit has a switch on the same side as the reboot button, wifi switch, camera switch, and modem switch. Move it to the "USB Mode" position and hit the reboot button next to it in order to put the device into 'flash' mode.

== Installation ==

=== Flashing ===

The process for flashing postmarketOS on Librem5 Devkit is not yet automated with pmbootstrap's flasher capabilities, therefore flashing must be performed manually.

The Librem5 Devkit uses a utility called <code>uuu</code>. The [https://github.com/NXPmicro/mfgtools source code for this tool can be downloaded here]. 

Unfortunately the u-boot image currently built with the <code>u-boot-librem5dev</code> does not work for placing the device into the appropriate mode for receiving the emmc image. At this time, you will need to download a u-boot image that will work, I recommend grabbing [https://arm01.puri.sm/job/u-boot_builds/job/devkit-recovery_uboot_build/ the latest from Purism here.] At this location, the file is named <code>u-boot-devkit-recovery.imx</code>

Once this tool is built and the required u-boot image is downloaded, you can use it to install a postmarketOS image using the following <code>uuu</code> script:

 <nowiki>
uuu_version 1.0.1
SDP: boot -f /REPLACE/WITH/PATH/TO/u-boot-devkit-recovery.imx
SDPU: delay 1000
SDPU: write -f /REPLACE/WITH/PATH/TO/u-boot-devkit-recovery.imx -offset 0x57c00
SDPU: jump
SDPU: delay 1000
FB: ucmd setenv fastboot_dev mmc
FB: ucmd setenv mmcdev 0
FB: flash -raw2sparse all /home/YOU/.local/var/pmbootstrap-out/chroot_native/home/pmos/rootfs/purism-librem5dev.img
FB: Done
</nowiki>

Save this script and use it by passing it directly to <code>uuu</code>:

 <nowiki>
$ uuu pmos.lst
...
</nowiki>

Once the image has been flashed, place the device into emmc mode and hit the reboot button to start booting postmarketOS. The first boot can take a few minutes as it resizes the rootfs to fill all available space on the emmc disk.


=== Graphics ===

The Vivante GPU in the devkit is not fully currently supported upstream in Mesa. In order to achieve preliminary 3D acceleration on this device, you can use the [https://gitlab.com/craftyguy/pmaports/commits/librem5_playground 'librem5_playground' branch in craftyguy's repo]. This builds a Purism branch of Mesa with not-yet-upstream patches.

The <code>device-librem5-devkit</code> package does not include this newer Mesa as a dependency.

If you select a GUI during <code>pmbootstrap init</code> and have this pmaports branch checked out under the aports directory, then the main Mesa packages (excluding mesa-dri-*) will automatically built into the rootfs image. The following mesa-dri-* packages will need to be copied to device manually and installed. To copy the Mesa packages built by this branch (ignoring mesa-dev and swrast/osmesa) to the device:

 <nowiki>
$ scp /home/YOU/.local/var/pmbootstrap-out/packages/aarch64/mesa-19.0.0-r999.apk \
    /home/YOU/.local/var/pmbootstrap-out/packages/aarch64/mesa-dri-etnaviv-19.0.0-r999.apk \
    /home/YOU/.local/var/pmbootstrap-out/packages/aarch64/mesa-dri-imx-19.0.0-r999.apk \
    /home/YOU/.local/var/pmbootstrap-out/packages/aarch64/mesa-egl-19.0.0-r999.apk \
    /home/YOU/.local/var/pmbootstrap-out/packages/aarch64/mesa-gl-19.0.0-r999.apk \
    /home/YOU/.local/var/pmbootstrap-out/packages/aarch64/mesa-glapi-19.0.0-r999.apk \
    /home/YOU/.local/var/pmbootstrap-out/packages/aarch64/mesa-gles-19.0.0-r999.apk \
    user@<IP OF DEVKIT>:~/
</nowiki>

These can be easily installed/upgraded by running the following when logged into the device:

 <nowiki>
$ sudo apk add mesa*.apk
</nowiki>

Note: The Mesa package in this branch disables all other GPU drivers to help reduce compile time, and may also be buggy since it's based off of the Mesa master branch, so it's not likely to be merged into mainline pmaports.

== Todo ==

* Add uuu as a supported 'flasher' in pmbootstrap
** Include a uuu script for flashing rootfs. Note: It will likely need to be a template, with pmb injecting path to rootfs and u-boot.
* Bring up cellular modem
* Resolve issues with Wifi
** Interface shows up in OS, and wpa_supplicant seems to connect(?), but no IP.
* Resolve issues with Bluetooth
** Bluetooth can be started by loading the rsi_91x module with <code>dev_oper_mode=14</code> but this disables Wifi station/client mode and enables Wifi AP mode. It doesn't seem to work with <code>dev_oper_mode=13</code>, which enables Wifi client mode. 
* Current dts enables usb host but doesn't enable LCD display
** Some of us are not lucky enough to have a working LCD display.. so the default uses a dts that enables usb host mode for attaching keyboard/mouse for interacting with an HDMI display connected to the devkit. Others are lucky enough to have a working LCD display. There is no known dts file that includes both LCD display enabling magic and usb host enabling magic. This would be ideal.
* Test/enable camera
* Test/enable ambient light sensor


== See also ==

* [https://developer.puri.sm/Librem5/ Purism Librem5 devkit documentation]
