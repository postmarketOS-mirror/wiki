Unless a device has been [[The Mainline Kernel|mainlined]], we need to package the vendor kernel (also called "downstream kernel"). This is the reference for the {{alpine|APKBUILD}} files of vendor kernels.

== Generate a template ==
Usually you would generate both a new [[device specific package]] and a new vendor kernel package by running <code>pmbootstrap init</code> and typing in a new device name. In case you should only have a device package, but not a kernel package, you can regenerate the latter with <code>pmbootstrap aportgen linux-changeme-changeme</code> (you guessed it, <i>changeme</i> needs to be adjusted).

The template gets improved every now and then to make porting easier, so don't be surprised when you are looking at older ports and their APKBUILDs look a bit more complicated than what gets generated from the latest <code>pmbootstrap</code> version. Essentially they are doing the same thing.

== Modernize your aport ==
To recreate your vendor kernel aport on top of the latest (and therefore most readable) template, do the following steps:
<syntaxhighlight lang="shell-session">
$ mv aports/device/linux-wiki-example aports/device/linux-wiki-example-old
$ pmbootstrap aportgen linux-wiki-example
(now adjust the new aport to use the sources and patches from the "-old" folder)
$ pmbootstrap build --force linux-wiki-example
(now test it on your device and make sure it boots, e.g. with 'pmbootstrap zap', 'pmbootstrap install', 'pmbootstrap flasher boot')
$ rm -r aports/device/linux-wiki-example-old
$ pmbootstrap pkgrel_bump linux-wiki-example
$ git add -A
$ git commit -m "device/linux-wiki-example: modernize aport"
</syntaxhighlight>

== GCC version ==
The kernel gets compiled with {{wikipedia|GCC}}. Alpine Linux has been shipping version GCC 6 for a long time, but changed the default GCC version to GCC 8 in September 2018. It was discovered that at least one vendor kernel does not boot when compiled with GCC 8 ({{issue|103|pmaports}}), so we ended up packaging GCC 6 side by side with GCC 8. All existing 3.x vendor kernels that were packaged have been adjusted to use GCC 6 at this point in time, just to make sure we don't introduce any breakage there. The default for new packages is using the current GCC version that is packaged in Alpine (at time of writing: GCC 8).

=== Use GCC 6 ===
If your new kernel port does not boot at all, please try to compile it with GCC 6 and see if it works then.

'''Replace these lines:'''
<syntaxhighlight lang="bash">
# Compiler: latest GCC from Alpine
HOSTCC="${CC:-gcc}"
HOSTCC="${HOSTCC#${CROSS_COMPILE}}"
</syntaxhighlight>

with the following ones:

<syntaxhighlight lang="bash">
# Compiler: GCC 6 (doesn't boot when compiled with newer versions)
if [ "${CC:0:5}" != "gcc6-" ]; then
	CC="gcc6-$CC"
	HOSTCC="gcc6-gcc"
	CROSS_COMPILE="gcc6-$CROSS_COMPILE"
fi
</syntaxhighlight>

Then add <code>gcc6</code> to the kernel's <code>makedepends</code> line.

<span style="font-size:80%; font-style: italic">
Technical detail: the <code>if...</code> guard around setting the variables is necessary, because the <code>CC</code> and <code>CROSS_COMPILE</code> variables extend themselves. <code>abuild</code> will parse the <code>APKBUILD</code> a second time while running the <code>package()</code> step (inside fakeroot). So without the <code>if</code> statement, we will end up with <code>CC="gcc6-gcc6-gcc"</code> instead of <code>CC="gcc6-gcc"</code> which gets problematic if you are calling <code>make</code> to install kernel modules in the package section (as done in <code>linux-asus-tf101</code> for example). Interestingly, only <code>CC</code> and <code>CROSS_COMPILE</code> gets passed through, hence we can't simply check the <code>HOSTCC</code> variable.
</span>

=== Use the newest GCC from Alpine ===
Let's say you are using a device that has already been packaged, and you want to figure out if it also boots when compiled with a newer compiler.

'''Replace these lines:'''
<syntaxhighlight lang="bash">
# Compiler: this kernel was only tested with GCC6. Feel free to make a merge
# request if you find out that it is booting working with newer GCCs as
# well. See <https://postmarketos.org/vendorkernel> for instructions.
if [ "${CC:0:5}" != "gcc6-" ]; then
	CC="gcc6-$CC"
	HOSTCC="gcc6-gcc"
	CROSS_COMPILE="gcc6-$CROSS_COMPILE"
fi
</syntaxhighlight>

with the following ones:

<syntaxhighlight lang="bash">
# Compiler: latest GCC from Alpine
HOSTCC="${CC:-gcc}"
HOSTCC="${HOSTCC#${CROSS_COMPILE}}"
</syntaxhighlight>

Then remove the <code>gcc6</code> package from the <code>makedepends</code> line.

Afterwards, remove the <code>compiler-gcc6.h</code> file from the aport folder, and from the <code>source</code> line. Instead you will probably need [https://gitlab.com/postmarketOS/pmaports/issues/103#note_104926654 other patches as linked here]. First try compiling without patches, then add one patch at a time to fix a specific problem. As usually, with <code>pmbootstrap checksum</code>, you can regenerate the checksums at the bottom of the file, this needs to be done whenever you change <code>source</code>.

When you made it boot successfully, please increase the <code>pkgrel</code> and make a merge request.

== heimdall-isorec ==
If you have a device that only boots with [[Deviceinfo_flash_methods#heimdall-isorec|heimdall-isorec]], you will need to adjust your linux APKBUILD as follows:
* add <code>busybox-static-armhf</code> to makedepends
* copy the "init" file from <code>linux-samsung-i9100</code> and customize the partition
* add "init" to <code>source=</code> in the APKBUILD
* ajust your <code>prepare()</code> like it's done in <code>linux-samsung-i9100</code> and adjust the paths in there

You can search for more examples of heimdall-isorec deviecs with grep:
<syntaxhighlight lang="shell-session">
$ grep -r 'deviceinfo_flash_method="heimdall-isorec"' aports
aports/device/device-samsung-i9070/deviceinfo:deviceinfo_flash_method="heimdall-isorec"
aports/device/device-samsung-i9100/deviceinfo:deviceinfo_flash_method="heimdall-isorec"
</syntaxhighlight>

== See also ==
* [[device specific package]]
* {{issue|103|pmaports}} Adjust to GCC8 upgrade in Alpine edge
* {{MR|30|pmaports}} device/linux-*: use GCC-6 for all 3.x kernels
