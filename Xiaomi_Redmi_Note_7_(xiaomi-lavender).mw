{{Infobox device
| manufacturer = Xiaomi
| name = Redmi Note 7
| codename = xiaomi-lavender
| image = File:Lavender boot log sm.jpg
| imagecaption = Redmi Note 7
| releaseyear = 2019
| originalsoftware = Android 9, MIUI 10
| chipset = Qualcomm SDM660 Snapdragon 660 (14 nm)
| cpu = 8-core (4x2.2 GHz Kryo 260 & 4x1.8 GHz Kryo 260)
| gpu = Adreno 512
| storage = 32 (64) Gb
| display = 1080 x 2340
| memory = 3 (4) Gb
| architecture = aarch64
| status_usbnet = Y
| status_flashing = Y
| status_touch = 
| status_screen = 
| status_wifi = 
| status_xwayland = 
| status_fde = 
| status_mainline = P
| status_battery = 
| status_3d = 
| status_accel = 
| status_audio = 
| status_bluetooth = 
| status_camera = 
| status_gps = 
| status_mobiledata = 
| status_sms = 
| status_calls = 
| status = Boots and has USB, but no more other functions
| booting = no
| pmoskernel = 4.4.153
| whet_dhry = -
| status_otg = 
}}

== Contributors ==
* ''[[user:alexeymin|Alexey Min]]''

== Maintainer(s) ==
* ''[[user:alexeymin|Alexey Min]]''

== Users owning this device ==
{{Device owners}}

== How to enter flash mode ==
=== Bootloader Unlocking ===
Like other Xiaomi devices, the user will have to acquire the bootloader unlock key: https://en.miui.com/unlock

The device will not unlock if the device isn't 7 days old (from the time when your device connects to internet and powered on, and linked with Mi Account)

=== Recovery mode ===
* Turn the device off (or restart also works)
* Hold {{button|Volume Up}} and {{button|Power}} button
* Once you feel vibration and phone turns on, release {{button|Power}} button
* Keep holding {{button|Volume Up}} until you get to recovery.

=== Flashing (Download, Fastboot) mode ===
* Same as recovery, but this time hold the {{button|Volume Down}} and {{button|Power}} keys.

== Installation ==

=== Flash a working custom Android ROM first ===
Flash a working custom Android ROM first - it will likely contain all needed custom partition images like <code>vbmeta</code> or <code>dtbo</code> (not sure if it's strictly needed). For example this [[https://forum.xda-developers.com/redmi-note-7/development/rom-lineageos-16-0-t3923203 LineageOS 16.0 ROM]]. The situation is a bit hard, because there is no official LineageOS release for this device yet, not even a official TWRP.

=== WIP ===
This is still a work-in-progress. If you want to test something, or help in the development, do:
* make sure you have TWRP installed
* backup <code>boot</code> and <code>system</code> partitions first from TWRP
* checkout my development branch in pmaports (link below in links section)
* zap & reinit pmbootstrap (<code>pmbootstrap -y zap ; pmbootstrap init</code>), choosing <code>xiaomi-lavender</code> as a device
* then rebuild every package mentioned in the last commits on my branch (for now: <code>pmbootstrap build --force --arch aarch64 linux-xiaomi-lavender device-xiaomi-lavender postmarketos-mkinitfs </code>)
* proceed with installation as usual (reboot device to fastboot mode, <code>pmbootstrap install ; pmbootstrap flasher flash_kernel ; pmbootstrap flasher flash_rootfs</code>).

== Additional info ==
=== Partition list ===

<div class="toccolours mw-collapsible mw-collapsed" style="width: 620px; overflow: auto;">
Partition list
<div class="mw-collapsible-content">

{| class="wikitable"
|-
! Device !! Label !! Size in blocks !! Size in bytes !! Stock FS
|-
| mmcblk0p1 || switch || 8 || 8192 ||
|-
| mmcblk0p2 || dpo || 8 || 8192 ||
|-
| mmcblk0p3 || fsc || 8 || 8192 ||
|-
| mmcblk0p4 || limits || 32 || 32768 ||
|-
| mmcblk0p5 || ssd || 32 || 32768 ||
|-
| mmcblk0p6 || sec || 20 || 20480 ||
|-
| mmcblk0p7 || vbmeta || 64 || 65536 ||
|-
| mmcblk0p8 || vbmetabak || 64 || 65536 ||
|-
| mmcblk0p9 || storsec || 128 || 128K ||
|-
| mmcblk0p10 || storsecbak || 128 || 128K ||
|-
| mmcblk0p11 || apdp || 256 || 256K ||
|-
| mmcblk0p12 || msadp || 256 || 256K ||
|-
| mmcblk0p13 || keystore || 512 || 512K ||
|-
| mmcblk0p14 || frp || 512 || 512K ||
|-
| mmcblk0p15 || rpm || 512 || 512K ||
|-
| mmcblk0p16 || rpmbak || 512 || 512K ||
|-
| mmcblk0p17 || hyp || 512 || 512K ||
|-
| mmcblk0p18 || hypbak || 512 || 512K ||
|-
| mmcblk0p19 || pmic || 512 || 512K ||
|-
| mmcblk0p20 || pmicbak || 512 || 512K ||
|-
| mmcblk0p21 || cmnlib || 1024 || 1024K ||
|-
| mmcblk0p22 || cmnlibbak || 1024 || 1024K ||
|-
| mmcblk0p23 || cmnlib64 || 1024 || 1024K ||
|-
| mmcblk0p24 || cmnlib64bak || 1024 || 1024K ||
|-
| mmcblk0p25 || abl || 1024 || 1024K ||
|-
| mmcblk0p26 || ablbak || 1024 || 1024K ||
|-
| mmcblk0p27 || dip || 1024 || 1024K ||
|-
| mmcblk0p28 || ddr || 1024 || 1024K ||
|-
| mmcblk0p29 || toolsfv || 1024 || 1024K ||
|-
| mmcblk0p30 || devcfgbak || 1024 || 1024K ||
|-
| mmcblk0p31 || devcfg || 1024 || 1024K ||
|-
| mmcblk0p32 || tz || 4096 || 4096K ||
|-
| mmcblk0p33 || tzbak || 4096 || 4096K ||
|-
| mmcblk0p34 || mdtpsecapp || 4096 || 4096K ||
|-
| mmcblk0p35 || mdtpsecappbak || 4096 || 4096K ||
|-
| mmcblk0p36 || keymaster || 1024 || 1024K ||
|-
| mmcblk0p37 || keymasterbak || 1024 || 1024K ||
|-
| mmcblk0p38 || bluetooth || 1024 || 1024K || vfat
|-
| mmcblk0p39 || lsti || 2048 || 2048K ||
|-
| mmcblk0p40 || xbl || 3584 || 3584K ||
|-
| mmcblk0p41 || xblbak || 3584 || 3584K ||
|-
| mmcblk0p42 || misc || 4096 || 4096K ||
|-
| mmcblk0p43 || devinfo || 8192 || 8192K ||
|-
| mmcblk0p44 || logfs || 8192 || 8192K ||
|-
| mmcblk0p45 || fsg || 8192 || 8192K ||
|-
| mmcblk0p46 || modemst1 || 8192 || 8192K ||
|-
| mmcblk0p47 || modemst2 || 8192 || 8192K ||
|-
| mmcblk0p48 || dsp || 16384 || 16.0M || vfat
|-
| mmcblk0p49 || bk1 || 24576 || 24.0M ||
|-
| mmcblk0p50 || mdtp || 32768 || 32.0M ||
|-
| mmcblk0p51 || bk2 || 16384 || 16.0M ||
|-
| mmcblk0p52 || dtbo || 8192 || 8192K ||
|-
| mmcblk0p53 || dtbobak || 8192 || 8192K ||
|-
| mmcblk0p54 || splash || 65536 || 64.0M ||
|-
| mmcblk0p55 || persist || 32768 || 32.0M || ext4
|-
| mmcblk0p56 || persistbak || 32768 || 32.0M || ext4
|-
| mmcblk0p57 || logdump || 65536 || 64.0M ||
|-
| mmcblk0p58 || modem || 196608 || 192M || vfat
|-
| mmcblk0p59 || rawdump || 131072 || 128M ||
|-
| mmcblk0p60 || boot || 65536 || 64.0M ||
|-
| mmcblk0p61 || recovery || 65536 || 64.0M ||
|-
| mmcblk0p62 || cache || 262144 || 256M || ext4
|-
| mmcblk0p63 || system || 3670016 || 3584M || ext4
|-
| mmcblk0p64 || vendor || 2097152 || 2048M || ext4
|-
| mmcblk0p65 || cust || 851968 || 832M || ext4
|-
| mmcblk0p66 || userdata || 22802415 || 21.7G || encrypted (dm-0)
|-
| mmcblk0rpmb ||  || 4096 ||
|}

</div>
</div>

=== Android Verified Boot (vbmeta) ===
This device is using [[Android_Verified_Boot_(AVB)]] so you may need to flash <code>vbmeta</code> partition with custom <code>vbmeta.img</code> from LineageOS zip or downloaded separately (from https://androidfilehost.com/?fid=1395089523397954291 for example). Or we need to find a way to generate it with <code>avbtool</code> and flash it during installation somehow. (package '''avbtool''' and add <code>pmbootstrap flasher flash_vbmeta</code>?)

=== DTBO partition ===
This device is using a dedicated partition to store the [[Device_Tree_(dtb)|Device Tree Blob]] Overlay. Read more at https://source.android.com/devices/architecture/dto/partitions . We need to find a way to flash generated <code>dt.img</code> to <code>dtbo</code> partition during installation process. (add <code>pmbootstrap flasher flash_dtbo</code>?)

Update: looks like '''dtbo''' partition is not used during boot by LineageOS's kernel, because it is using appended DTB (<code>CONFIG_BUILD_ARM64_APPENDED_DTB_IMAGE=y</code>)

Update2: device tree from dtbo partition can still be used by bootloader? Yes, it is. bootloader tries to actually overlay dtb from dtbo partition over a dtb found in boot.img, and if it fails to do so, it falls back into fastboot mode. Example bootloader debug UART output in that case:
 Memory Base Address: 0x40000000
 Decompressing kernel image start: 2700 ms
 Decompressing kernel image done: 2852 ms
 ufdt apply overlay failed
 Launching fastboot

See Zhuowei's notes on creating custom dtbo partition: https://gitlab.com/zhuowei/dtbo-google-crosshatch-mainline

For mainline kernel just <code>fastboot erase dtbo</code> works. Example output when dtbo partition is erased:
 Memory Base Address: 0x40000000
 Decompressing kernel image start: 2641 ms
 Decompressing kernel image done: 2793 ms
 Dtbo hdr magic mismatch 0, with D7B7AB1E
 Best match DTB tags 317/00020008/0x00000000/0/1001B/102001A/0/0/(offset)0x97128304/(size)0x00000653
 Using pmic info 0x1001B/0x102001A/0x0/0x0 for device 0x2001B/0x102001A/0x0/0x0
 Memory Base Address: 0x40000000
 smem protocol = 9C2FA0A0
 board_id1 is 1
  board_id2 is 1
  board_id3 is 0
 board_id is 1
 get_boardid_from_smem,SUCCESS ,board_id=0x102,cpu_id=0x39148C8C,hwdefined=0
  PON Reason is 17 cold_boot:1 charger path: 1
 ...(proceeding to normal boot procedure)...

=== Bootloader cmdline ===
Stock bootloader is doing nasty things with kernel command line: it passes a lot of arguments that make booting custom OS (like postmarketOS) impossible

Full list of stock command line parameters:
<pre>
ramoops_memreserve=4M

rcupdate.rcu_expedited=1
console=ttyMSM0,115200,n8
androidboot.console=ttyMSM0
earlycon=msm_serial_dm,0xc170000
androidboot.hardware=qcom
user_debug=31
msm_rtb.filter=0x37
ehci-hcd.park=3
lpm_levels.sleep_disabled=1
sched_enable_hmp=1
sched_enable_power_aware=1
service_locator.enable=1
swiotlb=1
firmware_class.path=/vendor/firmware_mnt/image
loop.max_part=7
androidboot.selinux=permissive
buildvariant=eng

androidboot.verifiedbootstate=orange
androidboot.keymaster=1
root=PARTUUID=2a7f6d6d-1c23-febe-7efb-9ccfa1432ace
androidboot.bootdevice=c0c4000.sdhci
androidboot.serialno=ac1dde4e
androidboot.cpuid=0x39148c8c
androidboot.dp=0x0
androidboot.baseband=sdm
mdss_mdp.panel=1:dsi:0:qcom,mdss_dsi_nt36672a_tianma_fhdplus_video:config0:1:none:cfg:single_dsi
skip_initramfs
rootwait
ro
init=/init
androidboot.dtbo_idx=0
androidboot.fpsensor=fpc
androidboot.secureboot=1
androidboot.hwc=Global
androidboot.hwversion=1.29.0
androidboot.hwlevel=MP
androidboot.hwdevice=lavender
</pre>

<code>ramoops_memreserve=4M</code> comes from defconfig, next from boot.img, others (starting with first <code>androidboot.</code> and below) come from bootloader directly.

==== Harmful kernel command line params from bootloader ====
Options like <code>root=</code>, <code>skip_initramfs</code> make kernel look for a specific partition to mount at /, skipping initramfs, which is incompatible with default booting methods of postmarketOS. That's why some tricky patches are needed, similar to ones used by Zhuowei in Google Pixel port: [https://gitlab.com/postmarketOS/pmaports/blob/master/device/linux-google-crosshatch/init-ignore-dm-parameter.patch 1], [https://gitlab.com/postmarketOS/pmaports/blob/master/device/linux-google-crosshatch/init-initramfs-disable-do_skip_initramfs.patch 2].

Another hack to fix bootloader cmdline params by opendata26: [https://gitlab.com/opendata26/linux/commit/40095e9a8b1eb32ad7ccd705c8990792e692ba1d init: ignore bootloader cmdline params for mounts]

Some info on <code>skip_initramfs</code> kernel cmdline parameter: https://forum.xda-developers.com/apps/magisk/pixel-2-pixel-2-xl-support-t3697427/post74361728#post74361728

=== Way to get boot log ===
This device known to ship with the <code>oem getlog</code> fastboot command.

This is not a trivial command to use, but it is extremely useful as it allows side-stepping the need to boot in a known working system to use the ramoops
console. The output of the command is a jumble, but is still usable for figuring out early boot issues. It is much better than having to rely on a booted system to
get the information, but still not as good as having a dedicated serial access.

Example usage follows.


 $ fastboot oem getlog 2>&1
 (bootloader) [    0.000000] Booting Linux on physical CPU 0x0
 [    0.000
 (bootloader) 000] Initializing cgroup subsys cpuset
 [    0.000000] Initi
 (bootloader) alizing cgroup subsys cpu
 [    0.000000] Initializing cgrou
 (bootloader) p subsys cpuacct
 [    0.000000] Initializing cgroup subsys
 (bootloader) schedtune
 [    0.000000] Linux version 4.4.153 (nixbld@loca
 (bootloader) lhost) (gcc version 4.9.4 (GCC) ) #2 SMP PREEMPT Sat Nov 23
 (bootloader)  20:31:33 UTC 2019
 [    0.000000] Boot CPU: AArch64 Process
 (bootloader) or [51af8014]
 [...]


As the output of the command is on stderr, here's how to output to a file.


 $ fastboot oem getlog > log.txt 2>&1


It is unknown if there are ways to make the output better. (Apply some kind error correction algorithm?)

EDIT: seems to not work for me, whatever you do, the output is:

 $ fastboot oem getlog
                                                   (bootloader) [Macle]Maybe no last kmsg
 OKAY [  0.000s]
 Finished. Total time: 0.000s

Probably needs a crash? But I can read pstore-console (dmesg) logs from booted TWRP recovery fine..

[[File:Xiaomi-lavender-uart-pins.jpg|200px|thumb|right|Xiaomi Redmi Note 7 (lavender) UART test pins schematic]]
=== Getting logs through debug UART ===

You have to disassemble the phone (just removing back cover is enough). You'll have to heat up edges of the back cover (as shown in disassembling video, see '''Links''' below) before trying to remove it. Be careful! It is made of glass! Also be careful about fingerprint sensor connector, it is connected to a back cover you are trying to remove. Don't rip it.

In the center you will see 4 test points that are available. (See the picture) Two bigger ones (0.8mm) are '''EDL''' (FORCE_USB_BOOT) pins. UART test points are two smaller ones on the left (0.5mm). TP11 is '''UART TX''' (gpio 4), TP10 is '''UART RX''' (gpio 5). GND is that whole metal shielding, that covers the center of the board. So, to get debug logs from UART it is enough to connect UART TX from the board to RX pin on the converter, and connect GND between phone and GND pin on the converter.

== Links ==
<!--
Link to related gitlab issues or merge requests like the following (replace CHANGEME with the ID, e.g. 1234):
* {{MR|CHANGEME|pmaports}} Initial merge request
* {{issue|CHANGEME|pmaports}} Some related issue
-->
* [https://gitlab.com/minlexx/pmaports/commits/xiaomi-lavender Current pmaports development branch]
* [https://gitlab.com/postmarketOS/linux-postmarketos/tree/qcom-sdm660 Current mainline kernel development branch]
<!--
If you manage to get your device packages merged, uncomment links below and change DEVICE_CODENAME with the actual one.
* [https://gitlab.com/postmarketOS/pmaports/tree/master/device/device-DEVICE_CODENAME Device package]
* [https://gitlab.com/postmarketOS/pmaports/tree/master/device/linux-DEVICE_CODENAME Kernel package]
-->
* [[Xiaomi_Redmi_Note_7_(xiaomi-lavender)/Mainline_development|Mainline development]]
* [https://github.com/NixOS/mobile-nixos/pull/28 NixOS-mobile lavender MR]
* https://www.youtube.com/watch?v=6GqXqW2Nygc Disassembling video (Rus)
* https://www.anandtech.com/show/11338/qualcomm-announces-snapdragon-660-630-mobile-platforms
* [https://www.kimovil.com/en/list-smartphones-by-processor/qualcomm-snapdragon-660-msm8976-plus List of mobile phones on SDM660 SoC]
