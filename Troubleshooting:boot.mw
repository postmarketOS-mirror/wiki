This page is about systematically debugging new postmarketOS device ports, where the kernel successfully compiles, but booting it appears not to be working at all. As always, please extend with everything you find out.

== Preparation ==
* Make sure you have created a [[Help:Device_Page|wiki page for your device]]
* Document everything you have tried out there, so when the next person with the same device comes along, it is possible to start from the work you have already done.

== General tips ==
* When everything fails: '''Try different kernel sources for your device'''
** Ideally you would use the kernel sources, that have been used to build a known working (Android) ROM or recovery image (e.g. TWRP) for your device
*** Make sure that you are really able to boot that known working kernel with Android/TWRP etc.
** For Android devices, if the usual LineageOS kernel does not work, try to find another one through GitHub search and on XDA
* [https://wiki.postmarketos.org/wiki/Matrix_and_IRC Ask in IRC/Matrix]
* [https://github.com/postmarketOS/pmbootstrap/issues Open an issue] (and link to it from your device's wiki page)
* Make a [[serial cable]] and look at the output of the bootloader
* If there is a similar device, that already has a postmarketOS port, take a look at its aport to see if it does anything special.
* Extract the TWRP boot.img, and the initramfs inside it (with <code>unpackbootimg</code> and [https://superuser.com/a/813899 cpio])
** Look through all the <code>rc</code> files, there might be some useful comment or some line like <code>write /sys/class/xxx/yyy/enable 1</code>

== Does the kernel boot? ==
Even if it looks like your device does nothing (e.g. still displaying the OEM logo or displaying a black screen), it can be that the kernel is actually booted. So unless you know for sure that it does not boot at all (because it directly reboots), try the following to get clarity:
* Check if you have a new network interface (run <code>ip a</code> or <code>ifconfig</code>)
** If you have the network interface, but no IP, try [[USB_Network#Troubleshooting|manually running a DHCP client]]
* Check the output of <code>lsusb</code> (before plugging the device in, then while it is in the bootloader mode, and finally after you have booted pmOS)
* Check what <code>dmesg</code> says after booting
** [[USB_Network#Troubleshooting|Example output for successfully booted device]]
* Let the device's LED indicate a successful boot
** Boot TWRP or another known working OS
** Get the exact paths to the LEDs with a shell
** Create the following postmarketOS initfs hook and boot the device
:: <syntaxhighlight lang="bash">
while true; do
	echo 255 > /sys/devices/i2c-0/0-0066/leds/blue/brightness
	sleep 1
	echo 0 > /sys/devices/i2c-0/0-0066/leds/blue/brightness
done
</syntaxhighlight>

Depending on whether your kernel is booted or not, read on in the appropriate section below. If it turns out, that your kernel is booted, and you have a network interface and get an IP address, then you probably only need to [[Porting_to_a_new_device#Display|get your display working]].

== Kernel boots without network interface ==
The postmarketOS initramfs is able to configure two different USB systems in the kernel in order to let your PC talk to your phone via networking. One of them has to be enabled (exclusively?):
* [[Kernel_configuration#CONFIG_USB_G_ANDROID|CONFIG_USB_G_ANDROID]]
** That is usually enabled in Android kernel forks.
* [[Kernel_configuration#CONFIG_USB_ETH|CONFIG_USB_ETH]] in combination with [[Kernel_configuration#CONFIG_USB_ETH_RNDIS|CONFIG_USB_ETH_RNDIS]]
** Usually used in mainline kernels (see also: [[Mainlining FAQ]])

You can use <code>grep</code> on your kernel config to check which of these options are enabled or not (<code>option=y</code> means it is enabled). If you want to change the options, don't modify the file directly, but use <code>pmbootstrap menuconfig</code> ([[Kernel_configuration|usage instructions]]). Otherwise the dependencies in that configuration file will not get resolved properly and cause other issues.

=== Note about HTC devices ===
* HTC devices seem to be tricky in general, we have a [[Troubleshooting:boot#See_also|few open issues]] with HTC devices that seem to be not booting
* The [[HTC_Desire_(htc-bravo)|HTC desire]] does work, and it required [https://github.com/postmarketOS/pmbootstrap/blob/bd4ebb3473764108daa92b308511be7e0a1b6948/aports/device/device-htc-bravo/initfs-hook.sh#L8 this line in the initfs-hook] to get USB network
* It was hard to discover: drebrez used the [[tuning sysfs]] instructions, but he had to write it as a initfs hook and save it in the <code>cache</code> partition of the device, then reboot in TWRP to get that file.
* Without a working display, no USB network and no serial output, you can use the LEDs for debugging and the other partitions to store files.

== postmarketOS is stuck somewhere in the boot process ==
* Do you have the system partition flashed to your device (or put it on an SD card and inserted it)?
** If the initramfs can not find the [[Partition-layout|boot partition]], it will display an error splash screen and wait forever.
** That means, if your screen does not work yet, it will just appear to be stuck and the SSH server will not come up.
* Install the [[Inspecting_the_initramfs|debug shell]] initramfs hook to get a telnet shell directly from the initramfs
** Try to run the lines from the init script manually to see where it fails (see <code>aports/main/postmarketos-mkinitfs/init.sh.in</code> in the <code>pmbootstrap</code> code)
* If you have powered off the device while it was not fully booted yet, it could be that you killed it while it was generating SSH keys. That means, it may have empty files instead of actual keys, so they will not get generated again, but also SSHD fails to start. When this could be the case with your issue, try to flash again and make sure that you do not turn off the device during the boot process this time.

== Kernel doesn't even boot ==
* Check the output of the bootloader with a [[serial debugging|serial cable]] if you have one.
** Making such a kernel takes some time, and it isn't even known how to do it for all devices. So if you don't have such a cable, try other methods.
* Double-check that you have used the right [[Porting_to_a_new_device#Defconfig|defconfig]]
* Android bootimg issues:
** Make sure that <code>pmbootstrap bootimg_analyze</code> outputs the same values, that you have put in your [[deviceinfo]]
** Analyze a bootimg file, for which you have verified that it boots on your device (with TWRP or Android).
** If you [[QCDT#Does_my_device_need_a_QCDT_boot.img_file.3F|have a QCDT device]], check out [[QCDT#Debugging|QCDT debugging]]
* A less systematic approach is booting the postmarketOS initramfs with a [[Using_prebuilt_kernels|prebuilt kernel]]. This is listed for the sake of completeness, but building another kernel from source (like in the [[Porting_to_a_new_device|porting guide]]) is probably more fruitful and over a much cleaner approach.
** If that works, maybe you can debug the issue from that point somehow
** Or even load the postmarketOS kernel with kexec
** There's a also a guide for [[Troubleshooting:kernel#Building_the_kernel_with_Android.27s_build_system|building the kernel with Android's build system]]

== See also ==
* {{github|1206}} HTC One M8 not booting
* {{github|1203}} HTC Wildfire not booting
* {{github|99}} HTC Droid DNA (dlx) not booting
* [https://developer.qualcomm.com/qfile/28821/lm80-p0436-1_little_kernel_boot_loader_overview.pdf Qualcomm LK Boot Loader Overview]
