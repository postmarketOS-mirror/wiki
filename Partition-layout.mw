=== General partition layout (installation image) ===
{{note|The postmarketOS initramfs detects the partitions by their partition label.}}
<pre class="shell">/dev/installp1 # label: pmOS_boot (contains kernel, initramfs, initramfs-extra)
/dev/installp2 # label: pmOS_root (can be encrypted, when --fde is specified)</pre>

=== SD card ===

This is the least awkward layout - both partitions from above get directly created on the SD card. If your device has a sdcard slot, it is recommended to use it. Because then you don't wear down the internal flash storage of the device and don't need to worry about the phone's internal storage partition layout.

Usage:

<pre class="shell">$ ./pmbootstrap.py install --sdcard /dev/mmcblkX</pre>
=== Android internal storage ===

We don't want to modify the partition layout on the internal storage of Android systems. Because this seems somewhat risky, and then users couldn't simply install another ROM such as LineageOS anymore. So we came up with the following:

The Android internal storage is already partitioned - the layout seems to be different for every device, as well as the numbers they have assigned. But most notably the devices have the following partitions:

<pre>boot
system
userdata</pre>
We usually flash a <code>boot.img</code> file (which is the kernel + initramfs) to Android's <code>boot</code> partition (see also: [[deviceinfo_flash_methods]]) - because that is what works and what all other ROMs do. Now the interesting part is the system partition, where we flash our installation image (rootfs). But the installation image already has a partition layout and own partitions! So you will have '''subpartitions'''. In the end, it will look like this:

<pre class="shell">systemp1 # pmOS boot partition, only initramfs-extra gets used from there
systemp2 # pmOS (un)encrypted root filesystem</pre>
The initramfs (in the <code>boot.img</code> file!) will automatically find and mount the pmOS boot and root partition, load the <code>initramfs-extra</code> (which contains additional files, it was split to save space) and take care of booting through until [https://github.com/postmarketOS/pmbootstrap/wiki/Glossary#openrc OpenRC] takes over.

==== Flashing to "userdata" ====
The <code>userdata</code> partition is not used yet (proposal to do that is in {{issue|60}}). But as we are pretty flexible, you can also flash pmOS to the <code>userdata</code> partition, if it has more space and you can't fit it on the <code>system</code> partition. The initramfs will detect it anyway. Just make sure, that you don't have it flashed to ''both'' partitions!

To flash to the <code>userdata</code> partition instead of the <code>system</code> partition, use <code>pmbootstrap flasher flash_rootfs --partition=USERDATA</code>.

If you had flashed postmarketOS to the system partition before, make sure to format it with <code>fastboot format system</code>.

=== Future ideas ===

{{note|See also: Allow booting from an image file (/data/postmarketOS.img) instead of flashing to a partition ({{github|953}})}}

There might be scenarios, in which the partition type of the <code>system</code> partition can not be changed through the flasher, because it only allows [https://en.wikipedia.org/wiki/YAFFS2 yaffs2] or simg with ext4 support (during research for the mozilla flame, we found that to be the case ({{issue|299}}) - however, it also has an SD slot, so we did not continue this way ({{issue|337}})).

A proposal we have for that case, is to have one big ext4/yaffs partition, and include the whole system image file inside that. Then we would adjust the initramfs code to find the boot and root partitions inside that, and teach it how to resize the whole thing to the maximum partition size. We already did some experiments, and so far everything worked (talk to drebrez or ollieparanoid).

[[Category:Technical Reference]]
