Some Androids only accept [[Glossary#boot.img|boot.img]] files in the '''QCDT''' format, which means the [[dtb]] is appended to the end of it (and not at the end of the kernel, as with most other Android devices).

== Does my device need a QCDT boot.img file? ==
Analyze a known working boot.img file with pmbootstrap to find out, if it has the QCDT format or not. You can get such a file from downloading a TWRP image (it is directly in the boot.img format!) or by downloading a full Android ROM for your device and extracting the boot.img file.
<syntaxhighlight lang="shell-session">
$ pmbootstrap bootimg_analyze /path/to/boot.img
</syntaxhighlight>

If this prints <code>deviceinfo_bootimg_qcdt="true"</code>, then you have a QCDT device.

== Properly package a QCDT device ==
The easiest way is using <code>pmbootstrap init</code> to generate a new device, and let it analyze the boot.img file in the process. It will adjust the device and linux package as necessary. But if you want to do it manually:
* Set <code>deviceinfo_bootimg_qcdt="true"</code> in the [[deviceinfo]]
* Adjust your <code>linux-</code> APKBUILD to generate the <code>/boot/dt.img</code> (look at other QCDT devices to see how it's done, grep for qcdt in aports)

== Debugging ==
* Hook up the [[serial UART]] and see what kind of debug output the bootloader provides
* Repack the boot image with a working <code>dt.img</code> from another distribution (stock, Lineage, recovery, etc.)

=== Compare the appended dtb files ===
<syntaxhighlight lang="shell-session">
$ pmbootstrap install
$ pmbootstrap chroot -r -- mkdir -p /tmp/extract-dtb-known-working
$ sudo cp known_working_boot.img ~/.local/var/pmbootstrap/chroot_rootfs_*/tmp/extract-dtb-known-working/boot.img
$ pmbootstrap chroot -r
# apk add extract-dtb
# mkdir -p /tmp/extract-dtb-pmOS
# ls /boot/
# cp /boot/boot.img-* /tmp/extract-dtb-pmOS/boot.img
# cd /tmp/extract-dtb-pmOS
# extract-dtb boot.img
# cd /tmp/extract-dtb-known-working
# extract-dtb boot.img
Now compare the output in both temp folders.
Is there the same amount of dtb files, and are the files the same?
If not, then the QCDT generation went wrong.
</syntaxhighlight>

=== Repack procedure ===
{{note|Please update these instructions when trying them out as they seem outdated, check the <code>--help</code> pages of the tools for help.}}
You need <code>mkbootimg</code> and <code>unpackbootimg</code> tools which are already packaged in pmbootstrap.

<syntaxhighlight lang="shell-session">
$ sudo mkdir -p ~/.local/var/pmbootstrap/chroot_native/tmp/bootimg_repack
$ sudo cp pmos-boot.img ~/.local/var/pmbootstrap/chroot_native/tmp/bootimg_repack/
$ sudo cp other-.img ~/.local/var/pmbootstrap/chroot_native/tmp/bootimg_repack/
$ pmbootstrap chroot --add=mkbootimg-osm0sis
# cd /tmp/bootimg_repack
# unpackbootimg -i pmos-boot.img -o pmos
# unpackbootimg -i other-boot.img -o other
$ cp other/boot.img-dt pmos/boot.img-$vendor-$name-dt
$ mkbootimg-osm0sis -o boot.repack.img -r pmos/boot.img-$vendor-$name-
</syntaxhighlight>
You can also get these from https://github.com/efidroid/build/tree/master/tools

<code>abootimg</code> is packaged for postmarketOS as well, which allows to repackage the boot.img files without extracting them.

== See also ==
* [[dtbtool]]
* {{github|323}} related discussion
* {{github|356}} first implementation
* [https://github.com/s0be/dtimgextract dtimgextract]
* {{issue|1206}} debugging session for "FAILED (remote: dtb not found)" (contains a [https://gitlab.com/postmarketOS/pmbootstrap/issues/1206#note_85244905 workaround])

[[Category:Technical Reference]]
