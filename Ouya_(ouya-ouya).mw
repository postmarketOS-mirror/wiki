{{Infobox device
| manufacturer = Ouya, Inc.
| name = Ouya
| codename = ouya_1_1
| image = File:ouya-screenshot.jpg
| imagecaption = Ouya
| releaseyear = 2013
| originalsoftware = Android
| chipset = Nvidia Tegra 3
| cpu = 4x 1.7 GHz Cortex-A9
| gpu = Nvidia GeForce ULP<br/>520 MHz (12.48 GFLOPS)
| storage = 8/16 GB
| display = 1x HDMI
| memory = 1 GB
| architecture = armv7
| whet_dhry = 1450.2
| status_usbnet = Y
| status_flashing = P
| status_touch = -
| status_screen = -
| status_wifi = Y
| status_xwayland = Y
| status_fde = P
| status_mainline = P
| status_battery = -
| status_3d = 
| status_accel = -
| status_audio = 
| status_bluetooth = Y
| status_camera = -
| status_gps = -
| status_mobiledata = -
| status_sms = -
| status_calls = -
| status = 
| booting = yes
}}

== Contributors ==
* rendeko
* ryang2678 (Decatf)
* ollieparanoid

== Maintainer(s) ==
* rendeko


== Safe Boot ==
We avoid flashing the <code>boot</code> partition because [https://www.reddit.com/r/ouya/comments/5i02u4/ouya_dead_apx_mode/dcvlyts/ a corrupted kernel would irreversibly brick the Ouya.] We use a tool called [https://forum.xda-developers.com/showthread.php?t=2692836 Ouya BootMenu] [https://github.com/milaq/ouya_bootmenu (source)] that allows us to chain load the postmarketOS kernel using kexec.

== Audio ==

There are two mechanisms to output audio through HDMI.
* Tegra30 HDA
* Tegra30 SPDIF

The HDA device is what is used by the downstream kernel and stock Ouya Android ROM. The SPDIF device only outputs to the left channel.  

Audio output through the HDA device works on the downstream kernel. The HDA device is card 0 device 3. It can be tested by running <code>speaker-test -Dhw:0,3 -c 2</code>. The SPDIF device is card 1 device 0. It can be tested by running <code>speaker-test -Dhw:1,0 -c 2</code>.  

The mainline kernel has a tegra30-hda driver but it isn't working on Ouya. There is no upstreamed driver for the Tegra30 SPDIF device.  


The Tegra30 HDA driver writes 4 frames and then hangs. 

<source lang="shell">
$ speaker-test -Dhw:0,3 -c 2

speaker-test 1.1.8

Playback device is hw:0,3
Stream parameters are 48000Hz, S16_LE, 2 channels
Using 16 octaves of pink noise
Rate set to 48000Hz (requested 48000Hz)
Buffer size range from 64 to 16384
Period size range from 32 to 8192
Using max buffer size 16384
Periods = 4
was set period_size = 4096
was set buffer_size = 16384
 0 - Front Left
snd_pcm_hw_writei
hw_writei: frames = 4096, xferi.result = 4096, err = 0
snd_pcm_hw_writei
hw_writei: frames = 4096, xferi.result = 4096, err = 0
snd_pcm_hw_writei
hw_writei: frames = 4096, xferi.result = 4096, err = 0
snd_pcm_hw_writei
hw_writei: frames = 4096, xferi.result = 4096, err = 0
snd_pcm_hw_writei
hw_writei: frames = 4096, xferi.result = -5, err = -5
Write error: -5,I/O error
xrun_recovery failed: -5,I/O error
Transfer failed: I/O error
</source>

The kernel PCM framework in <code>sound/core/pcm_native.c</code> has a timeout waiting for the device to respond.
<source lang="shell">
[  691.115717] tegra-hda 70030000.hda: playback write error (DMA or IRQ trouble?)
</source>

It is uncertain why the HDA device isn't working on mainline. 
Possible avenues to explore:  
* Compare pinmuxes to downstream kernel.
* Are the necessary clocks enabled and at the correct frequency?

== Ethernet ==
A random MAC address is generated by the kernel at each boot. This is because the smsc9500 Ethernet device does not have a valid mac address stored in EEPROM. To set a consistent MAC address, create the file <code>/etc/udev/rules.d/99-mac-address.rules</code> with the following udev rule.  

<source lang="shell">
ACTION=="add", SUBSYSTEM=="net", KERNEL=="eth0", RUN+="/sbin/ip link set dev %k address f6:23:f0:42:98:cf"
</source>

== Radio ==
* The Ouya uses a BCM4330 radio chip for wifi and bluetooth. The downstream and mainline kernel use the same wifi firmware. The firmware shipped with the device is the only known firmware to work with the Ouya. The BCM4330 firmware in <code>linux-firmware</code> does not work.  

* Two later releases (the completely white special edition and completely black 2nd generation) [https://www.s-config.com/cyanogen-mod-and-the-ouya/ allegedly use a BCM4334 chipset.] This needs to be implemented and tested at a future date.

== Display Resolution ==
On the mainline kernel, display resolutions above 1280x720 are glitchy. The GPU is dependent on memory bandwidth but EMC scaling is not implemented in mainline. The Ouya bootloader sets the memory to 400 Mhz. Higher display resolutions work a bit better when the memory is set to 800Mhz but it is still glitchy.

== Other Notes ==
* Splash screen doesn't appear
* Hildon doesn't work?
* USB booting needs to be tested


== Installation ==
=== How to enter flash mode ===
1. Connect Ouya to PC

2. Use <code>adb reboot recovery</code> to enter recovery (or <code>adb reboot bootloader</code> to enter bootloader for fastboot commands)

===pmbootstrap===
{{todo| Work in progress, may be wrong. Only attempt for development}}

1. Flash [https://forum.xda-developers.com/showthread.php?t=2295645 CWM] and [https://forum.xda-developers.com/showthread.php?t=2692836 Ouya BootMenu].

2. Turn on Ouya, then press the power button many times until it scrolls to '''Bootloader''', and then wait until the boot menu disappears.

3. Run the following using ''pmbootstrap'':
<source lang="shell">
$ pmbootstrap init
$ pmbootstrap install --no-fde
$ pmbootstrap export
$ pmbootstrap flasher flash_rootfs
</source>
{{note|'''WARNING''': This will create two partitions under ''system'' partition instead of one which won't allow you to use '''Normal Boot''' option in Ouya BootMenu}}

4. Reboot Ouya, then press the power button many times until it scrolls to '''Recovery''', and then wait until CWM appears.

6. Using CWM menu options, mount ''/data'' partition.

7. Copy postmarketOS ''boot.img'' to ''/sdcard'' as ''altboot.img'':
<source lang="shell">
$ adb push /tmp/postmarketOS-export/boot.img-ouya-ouya /sdcard/altboot.img
</source>

8. Reboot Ouya, then press the power button many times until it scrolls to '''Alternate Boot''', and then wait until postmarketOS appears.

=== Using data partition as rootfs ===

{{note|'''WARNING''': Flashing to the userdata partition will overwrite all data on the device. Backup all data to another device before proceeding.}}

It is much more usable to flash rootfs to the data partition which is around 5.7GB in size.

==== Flashing to the data partition ====
Specify the partition to flash rootfs to with the <code>--partition</code> argument:
<source lang="shell">
$ pmbootstrap flasher flash_rootfs --partition userdata
</source>

Copy postmarketOS <code>boot.img</code> to <code>/system</code>:
<source lang="shell">
$ adb push /tmp/postmarketOS-export/boot.img-ouya-ouya /system/boot.img
</source>

==== Updating the kernel ====

When the <code>apk</code> package manager updates the kernel package (e.g. <code>linux-ouya-ouya</code> or <code>linux-ouya-ouya-mainline</code>) then the <code>boot.img</code> will be regenerated with the new kernel. Run the following commands on device to install the updated <code>boot.img</code>:
<source lang="shell">
$ mkdir /system
$ mount /dev/mmcblk1p3 /system
$ cp /boot/boot.img-ouya-ouya /system/boot.img
</source>

== Links ==
* [https://forum.xda-developers.com/showthread.php?t=2692836 Ouya BootMenu] [https://github.com/milaq/ouya_bootmenu (source)]
* [https://forum.xda-developers.com/showthread.php?t=2295645 CWM]
* [https://www.s-config.com/cyanogen-mod-and-the-ouya/ CyanogenMod documentation blog]
* {{MR|269|pmaports}} Add mainline based kernel for Ouya
