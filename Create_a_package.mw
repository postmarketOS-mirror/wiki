== Quick start ==
Create a template for a new package called <code>mynewpackage</code> in <code>aports/main</code>:
<syntaxhighlight lang="shell-session">
$ pmbootstrap newapkbuild mynewpackage
[21:34:27] Create /home/user/code/pmbootstrap/aports/main/mynewpackage
[21:34:27] Done
</syntaxhighlight>

We pass the arguments to {{alpine|newapkbuild}} from Alpine, which has lots of parameters to quickly customize the templates it generates. It is even possible to just specify the URL and let it download the tarball and automatically recognize the build system, package name and version:

<syntaxhighlight lang="shell-session">
$ pmbootstrap newapkbuild "https://github.com/alpinelinux/abuild/archive/v3.1.0.tar.gz"
</syntaxhighlight>

For reference, see the full help output:
<syntaxhighlight lang="shell-session">
$ pmbootstrap newapkbuild -h
usage: pmbootstrap newapkbuild [-h] [--folder FOLDER] [-n PKGNAME]
                               [-d PKGDESC] [-l LICENSE] [-u URL]
                               [-a | -C | -m | -p | -y] [-s] [-c] [-f]
                               PKGNAME[-PKGVER] | SRCURL

positional arguments:
  PKGNAME[-PKGVER] | SRCURL
                        set either the package name (optionally with the
                        PKGVER at the end, e.g. 'hello-world-1.0') or the
                        download link to the source archive

optional arguments:
  -h, --help            show this help message and exit
  --folder FOLDER       set postmarketOS aports folder (default: main)
  -n PKGNAME            set package name (only use with SRCURL)
  -d PKGDESC            set package description
  -l LICENSE            set package license identifier from
                        <https://spdx.org/licenses/>
  -u URL                set package URL
  -a                    create autotools package (use ./configure ...)
  -C                    create CMake package (assume cmake/ is there)
  -m                    create meson package (assume meson.build is there)
  -p                    create perl package (assume Makefile.PL is there)
  -y                    create python package (assume setup.py is there)
  -s                    use sourceforge source URL
  -c                    copy a sample init.d, conf.d and install script
  -f                    force even if directory already exists
</syntaxhighlight>

== General information ==
{{note|This section is hard to read, feel free to rewrite.}}

* Please read [https://wiki.alpinelinux.org/wiki/Creating_an_Alpine_package#APKBUILD_variables.2Ffunctions this section] from our upstream friends wiki (''which we should also extend and improve'')
* Please always package the latest version of a software (unless it is impossible because of software that depends on it, but try to avoid that!)
* Please do not copy maintainers/contributors from the other packages to your new ports (so they won't get annoyed by questions for pmOS/Alpine packages!). Instead please credit them in the commit messages (maybe with a link to the original build recipe)
* Alpine Linux uses <code>musl</code> as libc, not <code>glibc</code>. Never add <code>glibc</code> as dependency.
* Alpine uses busybox' <code>sh</code> for building packages. Do not use bash specific features.
* Manpages and other documentation goes into an extra -doc package in Alpine, and abuild will complain if the main package contains them. The solution is to add this: <code>subpackages=&quot;$pkgname-doc&quot;</code> ([https://wiki.alpinelinux.org/wiki/APKBUILD_Reference#doc.28.29 more info])
* You can look up the exact meaning of every variable and function in the [https://wiki.alpinelinux.org/wiki/APKBUILD_Reference APKBUILD Reference]
* Set up the git hook from the [[development guide]] article to automatically verify checksums in your APKBUILDs and therefore making your life easier
* [[How to create a patch when packaging software]]

=== Beware of legacy APKBUILDs ===
Alpine's program to build packages, <code>abuild</code> evolves constantly. But the APKBUILDs sometimes lack behind. Some APKBUILDs still have the following, which is unnecessary:
* <code>|| return 1</code> statements after every line (e.g. <code>make || return 1</code> is not needed anymore, use <code>make</code> instead)
* a custom <code>prepare()</code> function that does nothing but apply patches ([https://wiki.alpinelinux.org/wiki/APKBUILD_Reference#prepare.28.29 more information]))
* ''not'' using the <code>builddir</code> variable to point to the extracted source location (usually: <code>builddir="$srcdir/$pkgname-$pkgver"</code>)

=== Packaging git commits ===
Only package git commits when necessary. Stable releases are preferred. Consider asking upstream to tag releases.
* <code>pkgver</code>: We use the following format: <code>$lastrelease_gitYYYYMMDD</code>, e.g. <code>1.0_git20171101</code> (that makes it easy to see how old the commit is and <code>apk</code> is able to upgrade the package properly when the next release, e.g. <code>1.1</code>, comes out)
* Save the git commit in a variable <code>_commit=....</code> and use it throughout the <code>APKBUILD</code> (e.g. in the <code>builddir</code>), so it's easy to update it.
* The [https://wiki.alpinelinux.org/wiki/APKBUILD_Reference#source <code>source</code>] should be saved with the <code>$_commit</code> in the filename. For GitHub links, this means:
  <nowiki>source="$pkgname-$_commit.tar.gz::https://github.com/ORG/NAME/archive/$_commit.tar.gz"</nowiki>

=== When should pkgver/pkgrel get increased? ===
Whenever you update a package, it must have a new version. A version consists of <code>$pkgver-r$pkgrel</code>. The {{alpine|APKBUILD_Reference}} says:

* <code>pkgver</code>: The version of the software being packaged.
* <code>pkgrel</code>: Alpine/postmarketOS package release number. Starts at 0 (zero). Always increment <code>pkgrel</code> when making updates to an aport; reset <code>pkgrel</code> to 0 (zero) when incrementing <code>pkgver</code>.

Special cases, where this is not so obvious:
* <code>linux-*</code> packages: We always set the <code>pkgver</code> to the kernel version number and only increase it when the kernel source code has a new version number. All kernel config changes only increase the <code>pkgrel</code> number. In the case, that the linux kernel sources need to be updated, but the kernel version was not changed (Android kernel forks often do this), we can add a <code>_gitYYYYMMDD</code> suffix (see "Packaging git commits" above).
* <code>device-*</code> packages: This was not done consistently in the past, but it makes sense to update the <code>pkgver</code> when anything but the <code>APKBUILD</code> was changed. Because that is essentially the version of the software being packaged.

== Porting packages from Arch Linux ==
Arch Linux' <code>PKBUILD</code> format is similar to <code>APKBUILD</code> of Alpine. If you don't know how to package a new program, check out how Arch does it.
=== Find the package ===

[https://www.archlinux.org/packages/ Search here], click the package name, click on &quot;Source Files&quot; on the top right. A git repo with the <code>PKGBUILD</code> and all other files (such as patches) appears.

=== Differences between APKBUILDs and PKGBUILDs ===

* <code>APKBUILD</code>s do not have the arrays from bash, use flat strings instead
* There's no <code>optdepends</code>
* <code>-doc</code> subpackages (see above)
* <code>APKBUILD</code> has different options (!makeflags won't work, but it has !strip and !check)
